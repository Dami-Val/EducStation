{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damva\\\\EducStation\\\\src\\\\context\\\\ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/ThemeContext.jsx\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Crear el contexto del tema\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\n\n// Proveedor del contexto del tema\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Verificar si hay una preferencia guardada en localStorage\n  const getSavedTheme = () => {\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme === 'dark' || savedTheme === null && window.matchMedia('(prefers-color-scheme: dark)').matches;\n  };\n\n  // Estado para controlar si el tema es oscuro o claro\n  const [isDarkMode, setIsDarkMode] = useState(getSavedTheme());\n\n  // Función para cambiar entre tema oscuro y claro\n  const toggleTheme = () => {\n    setIsDarkMode(prevMode => !prevMode);\n  };\n\n  // Actualizar localStorage cuando cambia el tema\n  useEffect(() => {\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\n\n    // Actualizar la clase en el elemento HTML para estilos globales\n    if (isDarkMode) {\n      document.documentElement.classList.add('dark-mode');\n    } else {\n      document.documentElement.classList.remove('dark-mode');\n    }\n  }, [isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDarkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook personalizado para usar el contexto del tema\n_s(ThemeProvider, \"KX6H62W6Cd3soOJmGLzebpik3kk=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = React.useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme debe ser usado dentro de un ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","getSavedTheme","savedTheme","localStorage","getItem","window","matchMedia","matches","isDarkMode","setIsDarkMode","toggleTheme","prevMode","setItem","document","documentElement","classList","add","remove","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","useContext","undefined","Error","$RefreshReg$"],"sources":["C:/Users/damva/EducStation/src/context/ThemeContext.jsx"],"sourcesContent":["// src/context/ThemeContext.jsx\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Crear el contexto del tema\r\nexport const ThemeContext = createContext();\r\n\r\n// Proveedor del contexto del tema\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Verificar si hay una preferencia guardada en localStorage\r\n  const getSavedTheme = () => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    return savedTheme === 'dark' || \r\n           (savedTheme === null && window.matchMedia('(prefers-color-scheme: dark)').matches);\r\n  };\r\n\r\n  // Estado para controlar si el tema es oscuro o claro\r\n  const [isDarkMode, setIsDarkMode] = useState(getSavedTheme());\r\n\r\n  // Función para cambiar entre tema oscuro y claro\r\n  const toggleTheme = () => {\r\n    setIsDarkMode(prevMode => !prevMode);\r\n  };\r\n\r\n  // Actualizar localStorage cuando cambia el tema\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', isDarkMode ? 'dark' : 'light');\r\n    \r\n    // Actualizar la clase en el elemento HTML para estilos globales\r\n    if (isDarkMode) {\r\n      document.documentElement.classList.add('dark-mode');\r\n    } else {\r\n      document.documentElement.classList.remove('dark-mode');\r\n    }\r\n  }, [isDarkMode]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDarkMode, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook personalizado para usar el contexto del tema\r\nexport const useTheme = () => {\r\n  const context = React.useContext(ThemeContext);\r\n  if (context === undefined) {\r\n    throw new Error('useTheme debe ser usado dentro de un ThemeProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;;AAE3C;AACA,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,OAAOF,UAAU,KAAK,MAAM,IACpBA,UAAU,KAAK,IAAI,IAAIG,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAQ;EAC3F,CAAC;;EAED;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGhB,QAAQ,CAACQ,aAAa,CAAC,CAAC,CAAC;;EAE7D;EACA,MAAMS,WAAW,GAAGA,CAAA,KAAM;IACxBD,aAAa,CAACE,QAAQ,IAAI,CAACA,QAAQ,CAAC;EACtC,CAAC;;EAED;EACAjB,SAAS,CAAC,MAAM;IACdS,YAAY,CAACS,OAAO,CAAC,OAAO,EAAEJ,UAAU,GAAG,MAAM,GAAG,OAAO,CAAC;;IAE5D;IACA,IAAIA,UAAU,EAAE;MACdK,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,WAAW,CAAC;IACrD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,WAAW,CAAC;IACxD;EACF,CAAC,EAAE,CAACT,UAAU,CAAC,CAAC;EAEhB,oBACEZ,OAAA,CAACC,YAAY,CAACqB,QAAQ;IAACC,KAAK,EAAE;MAAEX,UAAU;MAAEE;IAAY,CAAE;IAAAX,QAAA,EACvDA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAvB,EAAA,CAnCaF,aAAa;AAAA0B,EAAA,GAAb1B,aAAa;AAoC1B,OAAO,MAAM2B,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGpC,KAAK,CAACqC,UAAU,CAAC/B,YAAY,CAAC;EAC9C,IAAI8B,OAAO,KAAKE,SAAS,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOH,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}