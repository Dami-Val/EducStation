{"ast":null,"code":"// src/components/admin/utils/syntaxHighlighting.js\n\nconst applySyntaxHighlighting = (content, mode) => {\n  if (!content) return \"<div>&nbsp;</div>\"; // Devuelve al menos una línea vacía\n\n  // [Mantener la función de HTML y eliminar la parte específica de Markdown]\n\n  // Función para escapar HTML de forma segura\n  const escapeHtml = unsafe => {\n    return unsafe.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n  };\n\n  // Crear divs para cada línea, manteniendo líneas vacías\n  const createDivs = html => {\n    const lines = html.split('\\n');\n    return lines.map(line => `<div>${line || \"&nbsp;\"}</div>`).join('');\n  };\n\n  // ENFOQUE PARA HTML - Usar clases específicas en un nivel superior\n\n  // Primero escapamos todo el contenido HTML\n  const escapedContent = escapeHtml(content);\n\n  // Luego aplicamos colores a diferentes partes usando clases\n  // En lugar de envolver cada parte, usamos <span> con clases que solo afectan al color\n\n  // Dividimos en líneas para procesar\n  const lines = escapedContent.split('\\n');\n\n  // Aplicamos colores a cada línea\n  const coloredLines = lines.map(line => {\n    // Primero identificamos qué tipo de línea es para decidir cómo colorearla\n    let colorClass = '';\n\n    // Si contiene etiquetas HTML\n    if (line.includes('&lt;') && line.includes('&gt;')) {\n      colorClass = 'html-tag-line';\n    }\n    // Si parece ser CSS\n    else if (line.includes('{') || line.includes('}') || line.includes(':') && line.includes(';')) {\n      colorClass = 'css-line';\n    }\n    // Si parece ser JS\n    else if (line.includes('function') || line.includes('var ') || line.includes('let ') || line.includes('const ')) {\n      colorClass = 'js-line';\n    }\n\n    // Aplicamos la clase a la línea entera\n    return colorClass ? `<span class=\"${colorClass}\">${line}</span>` : line;\n  });\n  return createDivs(coloredLines.join('\\n'));\n};\n\n// Estilos CSS simplificados para colores (sin envolver cada elemento)\nconst syntaxHighlightingStyles = `\n/* Estilos base para el editor */\n.syntax-highlight-editor {\n  background-color: #1e1e1e;\n  color: #d4d4d4;\n  font-family: 'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace;\n  line-height: 1.5;\n  font-size: 14px;\n  padding: 16px;\n  border-radius: 8px;\n  tab-size: 2;\n  -moz-tab-size: 2;\n  white-space: pre;\n  counter-reset: line;\n  letter-spacing: normal;\n  word-spacing: normal;\n  margin: 0;\n}\n\n/* Corrección del desface haciendo que todos los elementos tengan el mismo tamaño */\n.syntax-highlight-editor * {\n  font-family: 'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  word-spacing: normal;\n  letter-spacing: normal;\n}\n\n/* Estilos para HTML con enfoque simplificado */\n.html-tag-line {\n  color: #e06c75; /* Color para líneas con etiquetas HTML */\n}\n\n.css-line {\n  color: #56b6c2; /* Color para líneas con CSS */\n}\n\n.js-line {\n  color: #98c379; /* Color para líneas con JavaScript */\n}\n\n/* HTML - Colores más vibrantes */\n.editor-tag-open, .editor-tag-close {\n  color: #e06c75;\n}\n\n.editor-attr-name {\n  color: #d19a66;\n}\n\n.editor-attr-value {\n  color: #98c379;\n}\n\n.editor-doctype {\n  color: #7f848e;\n}\n\n/* CSS */\n.editor-css-property {\n  color: #56b6c2;\n}\n\n.editor-css-value {\n  color: #98c379;\n}\n\n.editor-css-selector {\n  color: #c678dd;\n}\n\n/* Líneas numeradas */\n.syntax-highlight-editor {\n  counter-reset: line;\n  padding-left: 60px;\n}\n\n.syntax-highlight-editor div {\n  position: relative;\n  min-height: 1.5em;\n}\n\n.syntax-highlight-editor div:before {\n  content: counter(line);\n  counter-increment: line;\n  position: absolute;\n  left: -50px;\n  top: 0;\n  width: 40px;\n  color: #636d83;\n  text-align: right;\n  user-select: none;\n  opacity: 0.5;\n}\n\n/* Líneas vacías */\n.syntax-highlight-editor div:empty {\n  min-height: 1.5em;\n}\n\n.syntax-highlight-editor div:empty:after {\n  content: \" \";\n}\n\n/* Scrollbars personalizados */\n.syntax-highlight-editor::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n\n.syntax-highlight-editor::-webkit-scrollbar-track {\n  background: #2d2d2d;\n  border-radius: 3px;\n}\n\n.syntax-highlight-editor::-webkit-scrollbar-thumb {\n  background: #555;\n  border-radius: 3px;\n}\n\n.syntax-highlight-editor::-webkit-scrollbar-thumb:hover {\n  background: #777;\n}\n`;\n\n// Exportamos las funciones y estilos\nexport { applySyntaxHighlighting, syntaxHighlightingStyles };","map":{"version":3,"names":["applySyntaxHighlighting","content","mode","escapeHtml","unsafe","replace","createDivs","html","lines","split","map","line","join","escapedContent","coloredLines","colorClass","includes","syntaxHighlightingStyles"],"sources":["C:/Users/damva/EducStation/src/components/admin/utils/syntaxHighlighting.js"],"sourcesContent":["// src/components/admin/utils/syntaxHighlighting.js\r\n\r\nconst applySyntaxHighlighting = (content, mode) => {\r\n  if (!content) return \"<div>&nbsp;</div>\"; // Devuelve al menos una línea vacía\r\n  \r\n  // [Mantener la función de HTML y eliminar la parte específica de Markdown]\r\n\r\n  \r\n  // Función para escapar HTML de forma segura\r\n  const escapeHtml = (unsafe) => {\r\n    return unsafe\r\n      .replace(/&/g, \"&amp;\")\r\n      .replace(/</g, \"&lt;\")\r\n      .replace(/>/g, \"&gt;\")\r\n      .replace(/\"/g, \"&quot;\")\r\n      .replace(/'/g, \"&#039;\");\r\n  };\r\n  \r\n  // Crear divs para cada línea, manteniendo líneas vacías\r\n  const createDivs = (html) => {\r\n    const lines = html.split('\\n');\r\n    return lines.map(line => `<div>${line || \"&nbsp;\"}</div>`).join('');\r\n  };\r\n\r\n  // ENFOQUE PARA HTML - Usar clases específicas en un nivel superior\r\n  \r\n  // Primero escapamos todo el contenido HTML\r\n  const escapedContent = escapeHtml(content);\r\n  \r\n  // Luego aplicamos colores a diferentes partes usando clases\r\n  // En lugar de envolver cada parte, usamos <span> con clases que solo afectan al color\r\n  \r\n  // Dividimos en líneas para procesar\r\n  const lines = escapedContent.split('\\n');\r\n  \r\n  // Aplicamos colores a cada línea\r\n  const coloredLines = lines.map(line => {\r\n    // Primero identificamos qué tipo de línea es para decidir cómo colorearla\r\n    let colorClass = '';\r\n    \r\n    // Si contiene etiquetas HTML\r\n    if (line.includes('&lt;') && line.includes('&gt;')) {\r\n      colorClass = 'html-tag-line';\r\n    }\r\n    // Si parece ser CSS\r\n    else if (line.includes('{') || line.includes('}') || line.includes(':') && line.includes(';')) {\r\n      colorClass = 'css-line';\r\n    }\r\n    // Si parece ser JS\r\n    else if (line.includes('function') || line.includes('var ') || line.includes('let ') || line.includes('const ')) {\r\n      colorClass = 'js-line';\r\n    }\r\n    \r\n    // Aplicamos la clase a la línea entera\r\n    return colorClass ? `<span class=\"${colorClass}\">${line}</span>` : line;\r\n  });\r\n  \r\n  return createDivs(coloredLines.join('\\n'));\r\n};\r\n\r\n// Estilos CSS simplificados para colores (sin envolver cada elemento)\r\nconst syntaxHighlightingStyles = `\r\n/* Estilos base para el editor */\r\n.syntax-highlight-editor {\r\n  background-color: #1e1e1e;\r\n  color: #d4d4d4;\r\n  font-family: 'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace;\r\n  line-height: 1.5;\r\n  font-size: 14px;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  tab-size: 2;\r\n  -moz-tab-size: 2;\r\n  white-space: pre;\r\n  counter-reset: line;\r\n  letter-spacing: normal;\r\n  word-spacing: normal;\r\n  margin: 0;\r\n}\r\n\r\n/* Corrección del desface haciendo que todos los elementos tengan el mismo tamaño */\r\n.syntax-highlight-editor * {\r\n  font-family: 'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  word-spacing: normal;\r\n  letter-spacing: normal;\r\n}\r\n\r\n/* Estilos para HTML con enfoque simplificado */\r\n.html-tag-line {\r\n  color: #e06c75; /* Color para líneas con etiquetas HTML */\r\n}\r\n\r\n.css-line {\r\n  color: #56b6c2; /* Color para líneas con CSS */\r\n}\r\n\r\n.js-line {\r\n  color: #98c379; /* Color para líneas con JavaScript */\r\n}\r\n\r\n/* HTML - Colores más vibrantes */\r\n.editor-tag-open, .editor-tag-close {\r\n  color: #e06c75;\r\n}\r\n\r\n.editor-attr-name {\r\n  color: #d19a66;\r\n}\r\n\r\n.editor-attr-value {\r\n  color: #98c379;\r\n}\r\n\r\n.editor-doctype {\r\n  color: #7f848e;\r\n}\r\n\r\n/* CSS */\r\n.editor-css-property {\r\n  color: #56b6c2;\r\n}\r\n\r\n.editor-css-value {\r\n  color: #98c379;\r\n}\r\n\r\n.editor-css-selector {\r\n  color: #c678dd;\r\n}\r\n\r\n/* Líneas numeradas */\r\n.syntax-highlight-editor {\r\n  counter-reset: line;\r\n  padding-left: 60px;\r\n}\r\n\r\n.syntax-highlight-editor div {\r\n  position: relative;\r\n  min-height: 1.5em;\r\n}\r\n\r\n.syntax-highlight-editor div:before {\r\n  content: counter(line);\r\n  counter-increment: line;\r\n  position: absolute;\r\n  left: -50px;\r\n  top: 0;\r\n  width: 40px;\r\n  color: #636d83;\r\n  text-align: right;\r\n  user-select: none;\r\n  opacity: 0.5;\r\n}\r\n\r\n/* Líneas vacías */\r\n.syntax-highlight-editor div:empty {\r\n  min-height: 1.5em;\r\n}\r\n\r\n.syntax-highlight-editor div:empty:after {\r\n  content: \" \";\r\n}\r\n\r\n/* Scrollbars personalizados */\r\n.syntax-highlight-editor::-webkit-scrollbar {\r\n  width: 10px;\r\n  height: 10px;\r\n}\r\n\r\n.syntax-highlight-editor::-webkit-scrollbar-track {\r\n  background: #2d2d2d;\r\n  border-radius: 3px;\r\n}\r\n\r\n.syntax-highlight-editor::-webkit-scrollbar-thumb {\r\n  background: #555;\r\n  border-radius: 3px;\r\n}\r\n\r\n.syntax-highlight-editor::-webkit-scrollbar-thumb:hover {\r\n  background: #777;\r\n}\r\n`;\r\n\r\n// Exportamos las funciones y estilos\r\nexport { applySyntaxHighlighting, syntaxHighlightingStyles };"],"mappings":"AAAA;;AAEA,MAAMA,uBAAuB,GAAGA,CAACC,OAAO,EAAEC,IAAI,KAAK;EACjD,IAAI,CAACD,OAAO,EAAE,OAAO,mBAAmB,CAAC,CAAC;;EAE1C;;EAGA;EACA,MAAME,UAAU,GAAIC,MAAM,IAAK;IAC7B,OAAOA,MAAM,CACVC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CACtBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,MAAM,CAAC,CACrBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CACvBA,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMC,UAAU,GAAIC,IAAI,IAAK;IAC3B,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9B,OAAOD,KAAK,CAACE,GAAG,CAACC,IAAI,IAAI,QAAQA,IAAI,IAAI,QAAQ,QAAQ,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;EACrE,CAAC;;EAED;;EAEA;EACA,MAAMC,cAAc,GAAGV,UAAU,CAACF,OAAO,CAAC;;EAE1C;EACA;;EAEA;EACA,MAAMO,KAAK,GAAGK,cAAc,CAACJ,KAAK,CAAC,IAAI,CAAC;;EAExC;EACA,MAAMK,YAAY,GAAGN,KAAK,CAACE,GAAG,CAACC,IAAI,IAAI;IACrC;IACA,IAAII,UAAU,GAAG,EAAE;;IAEnB;IACA,IAAIJ,IAAI,CAACK,QAAQ,CAAC,MAAM,CAAC,IAAIL,IAAI,CAACK,QAAQ,CAAC,MAAM,CAAC,EAAE;MAClDD,UAAU,GAAG,eAAe;IAC9B;IACA;IAAA,KACK,IAAIJ,IAAI,CAACK,QAAQ,CAAC,GAAG,CAAC,IAAIL,IAAI,CAACK,QAAQ,CAAC,GAAG,CAAC,IAAIL,IAAI,CAACK,QAAQ,CAAC,GAAG,CAAC,IAAIL,IAAI,CAACK,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC7FD,UAAU,GAAG,UAAU;IACzB;IACA;IAAA,KACK,IAAIJ,IAAI,CAACK,QAAQ,CAAC,UAAU,CAAC,IAAIL,IAAI,CAACK,QAAQ,CAAC,MAAM,CAAC,IAAIL,IAAI,CAACK,QAAQ,CAAC,MAAM,CAAC,IAAIL,IAAI,CAACK,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAC/GD,UAAU,GAAG,SAAS;IACxB;;IAEA;IACA,OAAOA,UAAU,GAAG,gBAAgBA,UAAU,KAAKJ,IAAI,SAAS,GAAGA,IAAI;EACzE,CAAC,CAAC;EAEF,OAAOL,UAAU,CAACQ,YAAY,CAACF,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5C,CAAC;;AAED;AACA,MAAMK,wBAAwB,GAAG;AACjjB,uBAAuB,EAAEiB,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}