{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damva\\\\EducStation\\\\src\\\\components\\\\admin\\\\DualModeEditor.jsx\",\n  _s = $RefreshSig$();\n// src/components/admin/DualModeEditor.jsx\n// Modificar para eliminar la opción de markdown\n\n// Cambios clave:\n// 1. Eliminar el estado 'devSubMode' y siempre establecer a 'html'\n// 2. Eliminar los botones de selección entre markdown/html\n// 3. Actualizar las funciones para usar solo 'insertHTML'\n// 4. Eliminar importaciones relacionadas con markdown\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { colors, spacing, typography, shadows, borderRadius } from '../../styles/theme';\nimport EditorToolbar from './EditorToolbar';\nimport { insertHTML } from './utils/editorUtils';\nimport HTMLPreview from './HTMLPreview';\nimport SyntaxHighlighter from './SyntaxHighlighter';\nimport SimpleEditor from './SimpleEditor';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DualModeEditor = ({\n  content,\n  onChange,\n  initialMode = 'simple'\n}) => {\n  _s();\n  const textAreaRef = useRef(null);\n  const [mode, setMode] = useState('simple'); // Siempre comienza con 'simple'\n  const [activeTab, setActiveTab] = useState('code'); // Solo usado en modo desarrollador\n  const [internalContent, setInternalContent] = useState(content || '');\n  const [isHighlightingEnabled, setIsHighlightingEnabled] = useState(true);\n  const [simpleContent, setSimpleContent] = useState(content || '');\n\n  // Detectar si el contenido es HTML y actualizar el modo si es necesario\n  useEffect(() => {\n    // Detectar si el contenido parece ser HTML basado en etiquetas comunes\n    const hasHTMLStructure = /<(!DOCTYPE|html|head|body|div|p|h[1-6]|ul|ol|script|style)[^>]*>/i.test(content);\n\n    // Actualizar el contenido interno cuando cambia el contenido externo\n    setInternalContent(content || '');\n    setSimpleContent(content || '');\n  }, [content]);\n\n  // Manejar acciones de la barra de herramientas para el modo desarrollador\n  const handleToolbarAction = (actionType, placeholder) => {\n    if (mode === 'simple') {\n      // Para el modo simple, manejaremos esto de manera diferente\n      return;\n    }\n    const newContent = insertHTML(internalContent, actionType, placeholder, textAreaRef.current);\n    updateContent(newContent);\n  };\n\n  // Actualizar el contenido según el modo actual\n  const updateContent = newContent => {\n    setInternalContent(newContent);\n\n    // Notificar al componente padre sobre el cambio\n    const event = {\n      target: {\n        name: 'content',\n        value: newContent\n      }\n    };\n    onChange(event);\n  };\n\n  // Manejar cambio de modo entre desarrollador y simple\n  const handleModeToggle = newMode => {\n    setMode(newMode);\n\n    // Restablecer pestañas a vista de código al cambiar al modo desarrollador\n    if (newMode === 'developer') {\n      setActiveTab('code');\n    }\n\n    // Notificar al componente padre sobre el cambio de modo\n    const event = {\n      target: {\n        name: 'editorMode',\n        value: newMode === 'developer' ? 'html' : 'simple'\n      }\n    };\n    onChange(event);\n  };\n\n  // Manejar cambios en el área de texto\n  const handleTextAreaChange = e => {\n    setInternalContent(e.target.value);\n    onChange(e);\n  };\n\n  // Manejar cambios en el contenido del editor simple\n  const handleSimpleContentChange = newContent => {\n    setSimpleContent(newContent);\n\n    // Notificar al componente padre sobre el cambio\n    const event = {\n      target: {\n        name: 'content',\n        value: newContent\n      }\n    };\n    onChange(event);\n  };\n\n  // Alternar resaltado de sintaxis\n  const toggleSyntaxHighlighting = () => {\n    setIsHighlightingEnabled(!isHighlightingEnabled);\n  };\n\n  // Colores para los modos\n  const modeColors = {\n    developer: {\n      background: '#2C3E50',\n      text: '#FFFFFF',\n      hoverBg: '#34495E',\n      activeBg: '#E34C26',\n      // Color para HTML\n      activeText: '#FFFFFF',\n      badge: {\n        background: '#E34C26',\n        // Color para HTML\n        text: '#FFFFFF'\n      }\n    },\n    simple: {\n      background: '#2C3E50',\n      text: '#FFFFFF',\n      hoverBg: '#34495E',\n      activeBg: '#4CAF50',\n      activeText: '#FFFFFF',\n      badge: {\n        background: '#4CAF50',\n        text: '#FFFFFF'\n      }\n    }\n  };\n\n  // Estilos para el editor\n  const styles = {\n    // [mantener los estilos existentes...]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.editorContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.editorHeader,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.modeToggle,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Modo:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: styles.modeButton(mode === 'simple', 'simple'),\n          onClick: () => handleModeToggle('simple'),\n          children: \"Simple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: styles.modeButton(mode === 'developer', 'developer'),\n          onClick: () => handleModeToggle('developer'),\n          children: \"Desarrollador\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          style: styles.modeBadge,\n          children: mode === 'developer' ? 'HTML' : 'Simple'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), mode === 'developer' && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.tabsContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.tab,\n            ...(activeTab === 'code' ? styles.activeTab : {})\n          },\n          onClick: () => setActiveTab('code'),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '6px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            ...styles.tab,\n            ...(activeTab === 'preview' ? styles.activeTab : {})\n          },\n          onClick: () => setActiveTab('preview'),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center',\n              gap: '6px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), activeTab === 'code' && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.highlighterOptions,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.switchContainer,\n            onClick: toggleSyntaxHighlighting,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              style: styles.switchLabel,\n              children: \"Resaltado:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: styles.switch,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: isHighlightingEnabled,\n                style: styles.switchInput,\n                readOnly: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  ...styles.switchSlider,\n                  backgroundColor: isHighlightingEnabled ? '#E34C26' : colors.gray200\n                },\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: styles.switchThumb(isHighlightingEnabled)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.editorContent,\n      children: [mode === 'developer' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [activeTab === 'code' && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(EditorToolbar, {\n            onInsertMarkdown: handleToolbarAction,\n            mode: \"html\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 17\n          }, this), isHighlightingEnabled ? /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n            content: internalContent,\n            mode: \"html\",\n            onChange: handleTextAreaChange,\n            textAreaRef: textAreaRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n            ref: textAreaRef,\n            value: internalContent,\n            onChange: handleTextAreaChange,\n            style: styles.plainTextarea,\n            placeholder: \"Escribe c\\xF3digo HTML aqu\\xED...\",\n            spellCheck: \"false\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true), activeTab === 'preview' && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.previewContainer,\n          children: /*#__PURE__*/_jsxDEV(HTMLPreview, {\n            htmlContent: internalContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true), mode === 'simple' && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.simpleEditorContainer,\n        children: /*#__PURE__*/_jsxDEV(SimpleEditor, {\n          content: simpleContent,\n          onChange: handleSimpleContentChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), internalContent.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.autoSaveIndicator,\n        children: \"Guardado autom\\xE1tico...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n};\n_s(DualModeEditor, \"xk2i4gJ2ud6cWvYRlc0U9pnjJks=\");\n_c = DualModeEditor;\nexport default DualModeEditor;\nvar _c;\n$RefreshReg$(_c, \"DualModeEditor\");","map":{"version":3,"names":["React","useRef","useState","useEffect","colors","spacing","typography","shadows","borderRadius","EditorToolbar","insertHTML","HTMLPreview","SyntaxHighlighter","SimpleEditor","jsxDEV","_jsxDEV","Fragment","_Fragment","DualModeEditor","content","onChange","initialMode","_s","textAreaRef","mode","setMode","activeTab","setActiveTab","internalContent","setInternalContent","isHighlightingEnabled","setIsHighlightingEnabled","simpleContent","setSimpleContent","hasHTMLStructure","test","handleToolbarAction","actionType","placeholder","newContent","current","updateContent","event","target","name","value","handleModeToggle","newMode","handleTextAreaChange","e","handleSimpleContentChange","toggleSyntaxHighlighting","modeColors","developer","background","text","hoverBg","activeBg","activeText","badge","simple","styles","style","editorContainer","children","editorHeader","modeToggle","fileName","_jsxFileName","lineNumber","columnNumber","modeButton","onClick","modeBadge","tabsContainer","tab","display","alignItems","gap","highlighterOptions","switchContainer","switchLabel","switch","type","checked","switchInput","readOnly","switchSlider","backgroundColor","gray200","switchThumb","editorContent","onInsertMarkdown","ref","plainTextarea","spellCheck","previewContainer","htmlContent","simpleEditorContainer","length","autoSaveIndicator","_c","$RefreshReg$"],"sources":["C:/Users/damva/EducStation/src/components/admin/DualModeEditor.jsx"],"sourcesContent":["// src/components/admin/DualModeEditor.jsx\r\n// Modificar para eliminar la opción de markdown\r\n\r\n// Cambios clave:\r\n// 1. Eliminar el estado 'devSubMode' y siempre establecer a 'html'\r\n// 2. Eliminar los botones de selección entre markdown/html\r\n// 3. Actualizar las funciones para usar solo 'insertHTML'\r\n// 4. Eliminar importaciones relacionadas con markdown\r\n\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { colors, spacing, typography, shadows, borderRadius } from '../../styles/theme';\r\nimport EditorToolbar from './EditorToolbar';\r\nimport { insertHTML } from './utils/editorUtils';\r\nimport HTMLPreview from './HTMLPreview';\r\nimport SyntaxHighlighter from './SyntaxHighlighter';\r\nimport SimpleEditor from './SimpleEditor';\r\n\r\nconst DualModeEditor = ({ content, onChange, initialMode = 'simple' }) => {\r\n  const textAreaRef = useRef(null);\r\n  const [mode, setMode] = useState('simple'); // Siempre comienza con 'simple'\r\n  const [activeTab, setActiveTab] = useState('code'); // Solo usado en modo desarrollador\r\n  const [internalContent, setInternalContent] = useState(content || '');\r\n  const [isHighlightingEnabled, setIsHighlightingEnabled] = useState(true);\r\n  const [simpleContent, setSimpleContent] = useState(content || '');\r\n\r\n  // Detectar si el contenido es HTML y actualizar el modo si es necesario\r\n  useEffect(() => {\r\n    // Detectar si el contenido parece ser HTML basado en etiquetas comunes\r\n    const hasHTMLStructure = /<(!DOCTYPE|html|head|body|div|p|h[1-6]|ul|ol|script|style)[^>]*>/i.test(content);\r\n    \r\n    // Actualizar el contenido interno cuando cambia el contenido externo\r\n    setInternalContent(content || '');\r\n    setSimpleContent(content || '');\r\n  }, [content]);\r\n\r\n  // Manejar acciones de la barra de herramientas para el modo desarrollador\r\n  const handleToolbarAction = (actionType, placeholder) => {\r\n    if (mode === 'simple') {\r\n      // Para el modo simple, manejaremos esto de manera diferente\r\n      return;\r\n    }\r\n    \r\n    const newContent = insertHTML(\r\n      internalContent,\r\n      actionType,\r\n      placeholder,\r\n      textAreaRef.current\r\n    );\r\n    updateContent(newContent);\r\n  };\r\n\r\n  // Actualizar el contenido según el modo actual\r\n  const updateContent = (newContent) => {\r\n    setInternalContent(newContent);\r\n    \r\n    // Notificar al componente padre sobre el cambio\r\n    const event = {\r\n      target: {\r\n        name: 'content',\r\n        value: newContent\r\n      }\r\n    };\r\n    onChange(event);\r\n  };\r\n\r\n  // Manejar cambio de modo entre desarrollador y simple\r\n  const handleModeToggle = (newMode) => {\r\n    setMode(newMode);\r\n    \r\n    // Restablecer pestañas a vista de código al cambiar al modo desarrollador\r\n    if (newMode === 'developer') {\r\n      setActiveTab('code');\r\n    }\r\n    \r\n    // Notificar al componente padre sobre el cambio de modo\r\n    const event = {\r\n      target: {\r\n        name: 'editorMode',\r\n        value: newMode === 'developer' ? 'html' : 'simple'\r\n      }\r\n    };\r\n    onChange(event);\r\n  };\r\n\r\n  // Manejar cambios en el área de texto\r\n  const handleTextAreaChange = (e) => {\r\n    setInternalContent(e.target.value);\r\n    onChange(e);\r\n  };\r\n\r\n  // Manejar cambios en el contenido del editor simple\r\n  const handleSimpleContentChange = (newContent) => {\r\n    setSimpleContent(newContent);\r\n    \r\n    // Notificar al componente padre sobre el cambio\r\n    const event = {\r\n      target: {\r\n        name: 'content',\r\n        value: newContent\r\n      }\r\n    };\r\n    onChange(event);\r\n  };\r\n\r\n  // Alternar resaltado de sintaxis\r\n  const toggleSyntaxHighlighting = () => {\r\n    setIsHighlightingEnabled(!isHighlightingEnabled);\r\n  };\r\n\r\n  // Colores para los modos\r\n  const modeColors = {\r\n    developer: {\r\n      background: '#2C3E50',\r\n      text: '#FFFFFF',\r\n      hoverBg: '#34495E',\r\n      activeBg: '#E34C26', // Color para HTML\r\n      activeText: '#FFFFFF',\r\n      badge: {\r\n        background: '#E34C26', // Color para HTML\r\n        text: '#FFFFFF'\r\n      }\r\n    },\r\n    simple: {\r\n      background: '#2C3E50',\r\n      text: '#FFFFFF',\r\n      hoverBg: '#34495E',\r\n      activeBg: '#4CAF50',\r\n      activeText: '#FFFFFF',\r\n      badge: {\r\n        background: '#4CAF50',\r\n        text: '#FFFFFF'\r\n      }\r\n    }\r\n  };\r\n\r\n  // Estilos para el editor\r\n  const styles = {\r\n    // [mantener los estilos existentes...]\r\n  };\r\n\r\n  return (\r\n    <div style={styles.editorContainer}>\r\n      <div style={styles.editorHeader}>\r\n        {/* Selección de modo */}\r\n        <div style={styles.modeToggle}>\r\n          <span>Modo:</span>\r\n          <button\r\n            style={styles.modeButton(mode === 'simple', 'simple')}\r\n            onClick={() => handleModeToggle('simple')}\r\n          >\r\n            Simple\r\n          </button>\r\n          <button\r\n            style={styles.modeButton(mode === 'developer', 'developer')}\r\n            onClick={() => handleModeToggle('developer')}\r\n          >\r\n            Desarrollador\r\n          </button>\r\n          \r\n          {/* Insignia de modo actual */}\r\n          <span style={styles.modeBadge}>\r\n            {mode === 'developer' ? 'HTML' : 'Simple'}\r\n          </span>\r\n        </div>\r\n        \r\n        {/* Pestañas en modo desarrollador (solo mostrar en modo desarrollador) */}\r\n        {mode === 'developer' && (\r\n          <div style={styles.tabsContainer}>\r\n            <button\r\n              style={{\r\n                ...styles.tab,\r\n                ...(activeTab === 'code' ? styles.activeTab : {})\r\n              }}\r\n              onClick={() => setActiveTab('code')}\r\n            >\r\n              <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>\r\n                <span>Code</span>\r\n              </div>\r\n            </button>\r\n            <button\r\n              style={{\r\n                ...styles.tab,\r\n                ...(activeTab === 'preview' ? styles.activeTab : {})\r\n              }}\r\n              onClick={() => setActiveTab('preview')}\r\n            >\r\n              <div style={{ display: 'flex', alignItems: 'center', gap: '6px' }}>\r\n                <span>Preview</span>\r\n              </div>\r\n            </button>\r\n            \r\n            {/* Alternar resaltado de sintaxis (solo mostrar en pestaña de código) */}\r\n            {activeTab === 'code' && (\r\n              <div style={styles.highlighterOptions}>\r\n                <div \r\n                  style={styles.switchContainer}\r\n                  onClick={toggleSyntaxHighlighting}\r\n                >\r\n                  <span style={styles.switchLabel}>Resaltado:</span>\r\n                  <div style={styles.switch}>\r\n                    <input \r\n                      type=\"checkbox\" \r\n                      checked={isHighlightingEnabled}\r\n                      style={styles.switchInput}\r\n                      readOnly\r\n                    />\r\n                    <span \r\n                      style={{\r\n                        ...styles.switchSlider,\r\n                        backgroundColor: isHighlightingEnabled ? '#E34C26' : colors.gray200\r\n                      }}\r\n                    >\r\n                      <span style={styles.switchThumb(isHighlightingEnabled)} />\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div style={styles.editorContent}>\r\n        {/* Modo desarrollador */}\r\n        {mode === 'developer' && (\r\n          <>\r\n            {activeTab === 'code' && (\r\n              <>\r\n                <EditorToolbar \r\n                  onInsertMarkdown={handleToolbarAction} \r\n                  mode='html'\r\n                />\r\n                \r\n                {isHighlightingEnabled ? (\r\n                  <SyntaxHighlighter\r\n                    content={internalContent}\r\n                    mode='html'\r\n                    onChange={handleTextAreaChange}\r\n                    textAreaRef={textAreaRef}\r\n                  />\r\n                ) : (\r\n                  <textarea\r\n                    ref={textAreaRef}\r\n                    value={internalContent}\r\n                    onChange={handleTextAreaChange}\r\n                    style={styles.plainTextarea}\r\n                    placeholder=\"Escribe código HTML aquí...\"\r\n                    spellCheck=\"false\"\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n\r\n            {activeTab === 'preview' && (\r\n              <div style={styles.previewContainer}>\r\n                <HTMLPreview htmlContent={internalContent} />\r\n              </div>\r\n            )}\r\n          </>\r\n        )}\r\n        \r\n        {/* Modo simple */}\r\n        {mode === 'simple' && (\r\n          <div style={styles.simpleEditorContainer}>\r\n            <SimpleEditor \r\n              content={simpleContent}\r\n              onChange={handleSimpleContentChange}\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Indicador de autoguardado */}\r\n        {internalContent.length > 0 && (\r\n          <div style={styles.autoSaveIndicator}>\r\n            Guardado automático...\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DualModeEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}