{"ast":null,"code":"// src/components/admin/utils/syntaxHighlighting.js\n// Versión mejorada que evita insertar atributos en el texto y mantiene el formato de colores\n\n/**\r\n * Aplica resaltado de sintaxis al texto según el modo especificado (markdown o html)\r\n * Versión mejorada que usa un enfoque completamente separado para HTML\r\n * \r\n * @param {string} content - El contenido al que aplicar el resaltado\r\n * @param {string} mode - El modo de editor ('markdown' o 'html')\r\n * @returns {string} - HTML con etiquetas span para el resaltado\r\n */\nconst applySyntaxHighlighting = (content, mode) => {\n  if (!content) return \"<div>&nbsp;</div>\"; // Devuelve al menos una línea vacía\n\n  // Función para escapar HTML de forma segura\n  const escapeHtml = unsafe => {\n    return unsafe.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n  };\n\n  // Crear divs para cada línea, manteniendo líneas vacías\n  const createDivs = html => {\n    const lines = html.split('\\n');\n    return lines.map(line => `<div>${line || \"&nbsp;\"}</div>`).join('');\n  };\n\n  // Procesamiento para Markdown - No modificamos esta parte\n  if (mode === 'markdown') {\n    const lines = content.split('\\n');\n    let inCodeBlock = false;\n    let currentCodeLanguage = '';\n    let resultLines = [];\n\n    // Procesamos línea por línea\n    lines.forEach((line, index) => {\n      // Detectar si estamos en un bloque de código\n      if (line.trim().match(/^```(\\w*)$/)) {\n        if (!inCodeBlock) {\n          // Inicio de un bloque de código\n          inCodeBlock = true;\n          const match = line.trim().match(/^```(\\w*)$/);\n          currentCodeLanguage = match && match[1] ? match[1] : '';\n          resultLines.push(`<span class=\"editor-keyword\">${escapeHtml(line)}</span>`);\n        } else {\n          // Fin de un bloque de código\n          inCodeBlock = false;\n          currentCodeLanguage = '';\n          resultLines.push(`<span class=\"editor-keyword\">${escapeHtml(line)}</span>`);\n        }\n      } else if (inCodeBlock) {\n        // Dentro de un bloque de código\n        let coloredLine = escapeHtml(line);\n\n        // Resaltar según el lenguaje\n        if (currentCodeLanguage.toLowerCase().match(/js|javascript/)) {\n          // JavaScript\n          coloredLine = coloredLine\n          // Keywords\n          .replace(/\\b(function|return|var|let|const|if|else|for|while|switch|case|break|default|try|catch|throw|new|class|extends|import|export|from|async|await)\\b/g, '<span class=\"editor-keyword\">$1</span>')\n          // Strings\n          .replace(/([\"'])(.*?)\\1/g, '<span class=\"editor-string\">$&</span>')\n          // Numbers\n          .replace(/\\b(\\d+)\\b/g, '<span class=\"editor-number\">$1</span>')\n          // Comments\n          .replace(/(\\/\\/.*$)/g, '<span class=\"editor-comment\">$1</span>')\n          // Functions\n          .replace(/\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g, '<span class=\"editor-function\">$1</span>(');\n        } else if (currentCodeLanguage.toLowerCase().match(/html|xml/)) {\n          // HTML\n          coloredLine = coloredLine\n          // Tags\n          .replace(/(&lt;\\/?[a-zA-Z0-9]+)(\\s|&gt;)/g, '<span class=\"editor-tag-open\">$1</span>$2')\n          // Attributes\n          .replace(/(\\s+)([a-zA-Z0-9_-]+)(=)/g, '$1<span class=\"editor-attr-name\">$2</span><span class=\"editor-attr-value\">$3</span>')\n          // Values\n          .replace(/(=)(&quot;[^&]*&quot;|&#039;[^&]*&#039;)/g, '$1<span class=\"editor-attr-value\">$2</span>');\n        } else if (currentCodeLanguage.toLowerCase().match(/css/)) {\n          // CSS\n          coloredLine = coloredLine\n          // Properties\n          .replace(/([a-zA-Z-]+)(\\s*:)/g, '<span class=\"editor-css-property\">$1</span>$2')\n          // Values\n          .replace(/(:)(\\s*)([^;{}]+)(;|$)/g, '$1$2<span class=\"editor-css-value\">$3</span>$4')\n          // Selectors\n          .replace(/^([.#]?[a-zA-Z0-9_-]+)(\\s*\\{)/g, '<span class=\"editor-css-selector\">$1</span>$2');\n        } else {\n          // Generic code\n          coloredLine = `<span class=\"editor-inline-code\">${coloredLine}</span>`;\n        }\n        resultLines.push(coloredLine);\n      } else {\n        // Fuera de bloques de código\n        let escapedLine = escapeHtml(line);\n\n        // Headers\n        if (escapedLine.match(/^#{1,6}\\s/)) {\n          escapedLine = `<span class=\"editor-header\">${escapedLine}</span>`;\n        }\n        // Lists\n        else if (escapedLine.match(/^\\s*[-*+]\\s/)) {\n          escapedLine = `<span class=\"editor-list\">${escapedLine}</span>`;\n        }\n        // Numbered lists\n        else if (escapedLine.match(/^\\s*\\d+\\.\\s/)) {\n          escapedLine = `<span class=\"editor-list\">${escapedLine}</span>`;\n        }\n        // Blockquotes\n        else if (escapedLine.match(/^\\s*>\\s/)) {\n          escapedLine = `<span class=\"editor-blockquote\">${escapedLine}</span>`;\n        }\n        // Horizontal rules\n        else if (escapedLine.match(/^\\s*[-*_]{3,}\\s*$/)) {\n          escapedLine = `<span class=\"editor-hr\">${escapedLine}</span>`;\n        } else {\n          // Inline formatting\n          escapedLine = escapedLine\n          // Inline code\n          .replace(/`([^`\\n]+)`/g, '<span class=\"editor-inline-code\">`$1`</span>')\n          // Bold\n          .replace(/(\\*\\*|__)([^\\*\\n]+)(\\*\\*|__)/g, '<span class=\"editor-bold\">$1$2$3</span>')\n          // Italic\n          .replace(/(?<!\\*)\\*([^\\*\\n]+)\\*(?!\\*)|(?<!_)_([^_\\n]+)_(?!_)/g, (match, p1, p2) => {\n            const content = p1 || p2;\n            return `<span class=\"editor-italic\">*${content}*</span>`;\n          })\n          // Links\n          .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<span class=\"editor-link\">$&</span>')\n          // Images\n          .replace(/!\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<span class=\"editor-image\">$&</span>');\n        }\n        resultLines.push(escapedLine);\n      }\n    });\n    return createDivs(resultLines.join('\\n'));\n  } else if (mode === 'html') {\n    // NUEVO ENFOQUE PARA HTML - Usar clases específicas en un nivel superior\n\n    // Primero escapamos todo el contenido HTML\n    const escapedContent = escapeHtml(content);\n\n    // Luego aplicamos colores a diferentes partes usando clases\n    // En lugar de envolver cada parte, usamos <span> con clases que solo afectan al color\n\n    // Dividimos en líneas para procesar\n    const lines = escapedContent.split('\\n');\n\n    // Aplicamos colores a cada línea\n    const coloredLines = lines.map(line => {\n      // Primero identificamos qué tipo de línea es para decidir cómo colorearla\n      let colorClass = '';\n\n      // Si contiene etiquetas HTML\n      if (line.includes('&lt;') && line.includes('&gt;')) {\n        colorClass = 'html-tag-line';\n      }\n      // Si parece ser CSS\n      else if (line.includes('{') || line.includes('}') || line.includes(':') && line.includes(';')) {\n        colorClass = 'css-line';\n      }\n      // Si parece ser JS\n      else if (line.includes('function') || line.includes('var ') || line.includes('let ') || line.includes('const ')) {\n        colorClass = 'js-line';\n      }\n\n      // Aplicamos la clase a la línea entera\n      return colorClass ? `<span class=\"${colorClass}\">${line}</span>` : line;\n    });\n    return createDivs(coloredLines.join('\\n'));\n  }\n\n  // Para otros modos, devolver el texto escapado con divs\n  return createDivs(escapeHtml(content));\n};\n\n// Estilos CSS simplificados para colores (sin envolver cada elemento)\nconst syntaxHighlightingStyles = `\n/* Estilos base para el editor */\n.syntax-highlight-editor {\n  background-color: #1e1e1e;\n  color: #d4d4d4;\n  font-family: 'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace;\n  line-height: 1.5;\n  font-size: 14px;\n  padding: 16px;\n  border-radius: 8px;\n  tab-size: 2;\n  -moz-tab-size: 2;\n  white-space: pre;\n  counter-reset: line;\n  letter-spacing: normal;\n  word-spacing: normal;\n  margin: 0;\n}\n\n/* Corrección del desface haciendo que todos los elementos tengan el mismo tamaño */\n.syntax-highlight-editor * {\n  font-family: 'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  word-spacing: normal;\n  letter-spacing: normal;\n}\n\n/* Estilos para HTML con enfoque simplificado */\n.html-tag-line {\n  color: #e06c75; /* Color para líneas con etiquetas HTML */\n}\n\n.css-line {\n  color: #56b6c2; /* Color para líneas con CSS */\n}\n\n.js-line {\n  color: #98c379; /* Color para líneas con JavaScript */\n}\n\n/* Markdown general - Colores mejorados */\n.editor-header {\n  color: #61afef;\n  font-weight: bold;\n}\n\n.editor-bold {\n  color: #e06c75;\n  font-weight: bold;\n}\n\n.editor-italic {\n  color: #98c379;\n  font-style: italic;\n}\n\n.editor-inline-code {\n  color: #d19a66;\n  background-color: rgba(40, 44, 52, 0.5);\n  padding: 0 4px;\n  border-radius: 3px;\n}\n\n.editor-link {\n  color: #56b6c2;\n}\n\n.editor-image {\n  color: #56b6c2;\n}\n\n.editor-list {\n  color: #c678dd;\n}\n\n.editor-blockquote {\n  color: #98c379;\n  border-left: 3px solid #98c379;\n  padding-left: 8px;\n}\n\n.editor-hr {\n  color: #abb2bf;\n}\n\n/* Lenguajes específicos */\n/* JavaScript */\n.editor-keyword {\n  color: #c678dd;\n  font-weight: bold;\n}\n\n.editor-string {\n  color: #98c379;\n}\n\n.editor-number {\n  color: #d19a66;\n}\n\n.editor-comment {\n  color: #7f848e;\n  font-style: italic;\n}\n\n/* HTML - Colores más vibrantes */\n.editor-tag-open, .editor-tag-close {\n  color: #e06c75;\n}\n\n.editor-attr-name {\n  color: #d19a66;\n}\n\n.editor-attr-value {\n  color: #98c379;\n}\n\n.editor-doctype {\n  color: #7f848e;\n}\n\n/* CSS */\n.editor-css-property {\n  color: #56b6c2;\n}\n\n.editor-css-value {\n  color: #98c379;\n}\n\n.editor-css-selector {\n  color: #c678dd;\n}\n\n/* Líneas numeradas */\n.syntax-highlight-editor {\n  counter-reset: line;\n  padding-left: 60px;\n}\n\n.syntax-highlight-editor div {\n  position: relative;\n  min-height: 1.5em;\n}\n\n.syntax-highlight-editor div:before {\n  content: counter(line);\n  counter-increment: line;\n  position: absolute;\n  left: -50px;\n  top: 0;\n  width: 40px;\n  color: #636d83;\n  text-align: right;\n  user-select: none;\n  opacity: 0.5;\n}\n\n/* Líneas vacías */\n.syntax-highlight-editor div:empty {\n  min-height: 1.5em;\n}\n\n.syntax-highlight-editor div:empty:after {\n  content: \" \";\n}\n\n/* Scrollbars personalizados */\n.syntax-highlight-editor::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n\n.syntax-highlight-editor::-webkit-scrollbar-track {\n  background: #2d2d2d;\n  border-radius: 3px;\n}\n\n.syntax-highlight-editor::-webkit-scrollbar-thumb {\n  background: #555;\n  border-radius: 3px;\n}\n\n.syntax-highlight-editor::-webkit-scrollbar-thumb:hover {\n  background: #777;\n}\n`;\n\n// Exportamos las funciones y estilos\nexport { applySyntaxHighlighting, syntaxHighlightingStyles };","map":{"version":3,"names":["applySyntaxHighlighting","content","mode","escapeHtml","unsafe","replace","createDivs","html","lines","split","map","line","join","inCodeBlock","currentCodeLanguage","resultLines","forEach","index","trim","match","push","coloredLine","toLowerCase","escapedLine","p1","p2","escapedContent","coloredLines","colorClass","includes","syntaxHighlightingStyles"],"sources":["C:/Users/damva/EducStation/src/components/admin/utils/syntaxHighlighting.js"],"sourcesContent":["// src/components/admin/utils/syntaxHighlighting.js\r\n// Versión mejorada que evita insertar atributos en el texto y mantiene el formato de colores\r\n\r\n/**\r\n * Aplica resaltado de sintaxis al texto según el modo especificado (markdown o html)\r\n * Versión mejorada que usa un enfoque completamente separado para HTML\r\n * \r\n * @param {string} content - El contenido al que aplicar el resaltado\r\n * @param {string} mode - El modo de editor ('markdown' o 'html')\r\n * @returns {string} - HTML con etiquetas span para el resaltado\r\n */\r\nconst applySyntaxHighlighting = (content, mode) => {\r\n  if (!content) return \"<div>&nbsp;</div>\"; // Devuelve al menos una línea vacía\r\n  \r\n  // Función para escapar HTML de forma segura\r\n  const escapeHtml = (unsafe) => {\r\n    return unsafe\r\n      .replace(/&/g, \"&amp;\")\r\n      .replace(/</g, \"&lt;\")\r\n      .replace(/>/g, \"&gt;\")\r\n      .replace(/\"/g, \"&quot;\")\r\n      .replace(/'/g, \"&#039;\");\r\n  };\r\n  \r\n  // Crear divs para cada línea, manteniendo líneas vacías\r\n  const createDivs = (html) => {\r\n    const lines = html.split('\\n');\r\n    return lines.map(line => `<div>${line || \"&nbsp;\"}</div>`).join('');\r\n  };\r\n  \r\n  // Procesamiento para Markdown - No modificamos esta parte\r\n  if (mode === 'markdown') {\r\n    const lines = content.split('\\n');\r\n    let inCodeBlock = false;\r\n    let currentCodeLanguage = '';\r\n    let resultLines = [];\r\n    \r\n    // Procesamos línea por línea\r\n    lines.forEach((line, index) => {\r\n      // Detectar si estamos en un bloque de código\r\n      if (line.trim().match(/^```(\\w*)$/)) {\r\n        if (!inCodeBlock) {\r\n          // Inicio de un bloque de código\r\n          inCodeBlock = true;\r\n          const match = line.trim().match(/^```(\\w*)$/);\r\n          currentCodeLanguage = match && match[1] ? match[1] : '';\r\n          resultLines.push(`<span class=\"editor-keyword\">${escapeHtml(line)}</span>`);\r\n        } else {\r\n          // Fin de un bloque de código\r\n          inCodeBlock = false;\r\n          currentCodeLanguage = '';\r\n          resultLines.push(`<span class=\"editor-keyword\">${escapeHtml(line)}</span>`);\r\n        }\r\n      } else if (inCodeBlock) {\r\n        // Dentro de un bloque de código\r\n        let coloredLine = escapeHtml(line);\r\n        \r\n        // Resaltar según el lenguaje\r\n        if (currentCodeLanguage.toLowerCase().match(/js|javascript/)) {\r\n          // JavaScript\r\n          coloredLine = coloredLine\r\n            // Keywords\r\n            .replace(/\\b(function|return|var|let|const|if|else|for|while|switch|case|break|default|try|catch|throw|new|class|extends|import|export|from|async|await)\\b/g, '<span class=\"editor-keyword\">$1</span>')\r\n            // Strings\r\n            .replace(/([\"'])(.*?)\\1/g, '<span class=\"editor-string\">$&</span>')\r\n            // Numbers\r\n            .replace(/\\b(\\d+)\\b/g, '<span class=\"editor-number\">$1</span>')\r\n            // Comments\r\n            .replace(/(\\/\\/.*$)/g, '<span class=\"editor-comment\">$1</span>')\r\n            // Functions\r\n            .replace(/\\b([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*\\(/g, '<span class=\"editor-function\">$1</span>(');\r\n        } \r\n        else if (currentCodeLanguage.toLowerCase().match(/html|xml/)) {\r\n          // HTML\r\n          coloredLine = coloredLine\r\n            // Tags\r\n            .replace(/(&lt;\\/?[a-zA-Z0-9]+)(\\s|&gt;)/g, '<span class=\"editor-tag-open\">$1</span>$2')\r\n            // Attributes\r\n            .replace(/(\\s+)([a-zA-Z0-9_-]+)(=)/g, '$1<span class=\"editor-attr-name\">$2</span><span class=\"editor-attr-value\">$3</span>')\r\n            // Values\r\n            .replace(/(=)(&quot;[^&]*&quot;|&#039;[^&]*&#039;)/g, '$1<span class=\"editor-attr-value\">$2</span>');\r\n        }\r\n        else if (currentCodeLanguage.toLowerCase().match(/css/)) {\r\n          // CSS\r\n          coloredLine = coloredLine\r\n            // Properties\r\n            .replace(/([a-zA-Z-]+)(\\s*:)/g, '<span class=\"editor-css-property\">$1</span>$2')\r\n            // Values\r\n            .replace(/(:)(\\s*)([^;{}]+)(;|$)/g, '$1$2<span class=\"editor-css-value\">$3</span>$4')\r\n            // Selectors\r\n            .replace(/^([.#]?[a-zA-Z0-9_-]+)(\\s*\\{)/g, '<span class=\"editor-css-selector\">$1</span>$2');\r\n        }\r\n        else {\r\n          // Generic code\r\n          coloredLine = `<span class=\"editor-inline-code\">${coloredLine}</span>`;\r\n        }\r\n        \r\n        resultLines.push(coloredLine);\r\n      } else {\r\n        // Fuera de bloques de código\r\n        let escapedLine = escapeHtml(line);\r\n        \r\n        // Headers\r\n        if (escapedLine.match(/^#{1,6}\\s/)) {\r\n          escapedLine = `<span class=\"editor-header\">${escapedLine}</span>`;\r\n        }\r\n        // Lists\r\n        else if (escapedLine.match(/^\\s*[-*+]\\s/)) {\r\n          escapedLine = `<span class=\"editor-list\">${escapedLine}</span>`;\r\n        }\r\n        // Numbered lists\r\n        else if (escapedLine.match(/^\\s*\\d+\\.\\s/)) {\r\n          escapedLine = `<span class=\"editor-list\">${escapedLine}</span>`;\r\n        }\r\n        // Blockquotes\r\n        else if (escapedLine.match(/^\\s*>\\s/)) {\r\n          escapedLine = `<span class=\"editor-blockquote\">${escapedLine}</span>`;\r\n        }\r\n        // Horizontal rules\r\n        else if (escapedLine.match(/^\\s*[-*_]{3,}\\s*$/)) {\r\n          escapedLine = `<span class=\"editor-hr\">${escapedLine}</span>`;\r\n        }\r\n        else {\r\n          // Inline formatting\r\n          escapedLine = escapedLine\r\n            // Inline code\r\n            .replace(/`([^`\\n]+)`/g, '<span class=\"editor-inline-code\">`$1`</span>')\r\n            // Bold\r\n            .replace(/(\\*\\*|__)([^\\*\\n]+)(\\*\\*|__)/g, '<span class=\"editor-bold\">$1$2$3</span>')\r\n            // Italic\r\n            .replace(/(?<!\\*)\\*([^\\*\\n]+)\\*(?!\\*)|(?<!_)_([^_\\n]+)_(?!_)/g, (match, p1, p2) => {\r\n              const content = p1 || p2;\r\n              return `<span class=\"editor-italic\">*${content}*</span>`;\r\n            })\r\n            // Links\r\n            .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<span class=\"editor-link\">$&</span>')\r\n            // Images\r\n            .replace(/!\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<span class=\"editor-image\">$&</span>');\r\n        }\r\n        \r\n        resultLines.push(escapedLine);\r\n      }\r\n    });\r\n    \r\n    return createDivs(resultLines.join('\\n'));\r\n  } \r\n  else if (mode === 'html') {\r\n    // NUEVO ENFOQUE PARA HTML - Usar clases específicas en un nivel superior\r\n    \r\n    // Primero escapamos todo el contenido HTML\r\n    const escapedContent = escapeHtml(content);\r\n    \r\n    // Luego aplicamos colores a diferentes partes usando clases\r\n    // En lugar de envolver cada parte, usamos <span> con clases que solo afectan al color\r\n    \r\n    // Dividimos en líneas para procesar\r\n    const lines = escapedContent.split('\\n');\r\n    \r\n    // Aplicamos colores a cada línea\r\n    const coloredLines = lines.map(line => {\r\n      // Primero identificamos qué tipo de línea es para decidir cómo colorearla\r\n      let colorClass = '';\r\n      \r\n      // Si contiene etiquetas HTML\r\n      if (line.includes('&lt;') && line.includes('&gt;')) {\r\n        colorClass = 'html-tag-line';\r\n      }\r\n      // Si parece ser CSS\r\n      else if (line.includes('{') || line.includes('}') || line.includes(':') && line.includes(';')) {\r\n        colorClass = 'css-line';\r\n      }\r\n      // Si parece ser JS\r\n      else if (line.includes('function') || line.includes('var ') || line.includes('let ') || line.includes('const ')) {\r\n        colorClass = 'js-line';\r\n      }\r\n      \r\n      // Aplicamos la clase a la línea entera\r\n      return colorClass ? `<span class=\"${colorClass}\">${line}</span>` : line;\r\n    });\r\n    \r\n    return createDivs(coloredLines.join('\\n'));\r\n  }\r\n  \r\n  // Para otros modos, devolver el texto escapado con divs\r\n  return createDivs(escapeHtml(content));\r\n};\r\n\r\n// Estilos CSS simplificados para colores (sin envolver cada elemento)\r\nconst syntaxHighlightingStyles = `\r\n/* Estilos base para el editor */\r\n.syntax-highlight-editor {\r\n  background-color: #1e1e1e;\r\n  color: #d4d4d4;\r\n  font-family: 'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace;\r\n  line-height: 1.5;\r\n  font-size: 14px;\r\n  padding: 16px;\r\n  border-radius: 8px;\r\n  tab-size: 2;\r\n  -moz-tab-size: 2;\r\n  white-space: pre;\r\n  counter-reset: line;\r\n  letter-spacing: normal;\r\n  word-spacing: normal;\r\n  margin: 0;\r\n}\r\n\r\n/* Corrección del desface haciendo que todos los elementos tengan el mismo tamaño */\r\n.syntax-highlight-editor * {\r\n  font-family: 'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n  word-spacing: normal;\r\n  letter-spacing: normal;\r\n}\r\n\r\n/* Estilos para HTML con enfoque simplificado */\r\n.html-tag-line {\r\n  color: #e06c75; /* Color para líneas con etiquetas HTML */\r\n}\r\n\r\n.css-line {\r\n  color: #56b6c2; /* Color para líneas con CSS */\r\n}\r\n\r\n.js-line {\r\n  color: #98c379; /* Color para líneas con JavaScript */\r\n}\r\n\r\n/* Markdown general - Colores mejorados */\r\n.editor-header {\r\n  color: #61afef;\r\n  font-weight: bold;\r\n}\r\n\r\n.editor-bold {\r\n  color: #e06c75;\r\n  font-weight: bold;\r\n}\r\n\r\n.editor-italic {\r\n  color: #98c379;\r\n  font-style: italic;\r\n}\r\n\r\n.editor-inline-code {\r\n  color: #d19a66;\r\n  background-color: rgba(40, 44, 52, 0.5);\r\n  padding: 0 4px;\r\n  border-radius: 3px;\r\n}\r\n\r\n.editor-link {\r\n  color: #56b6c2;\r\n}\r\n\r\n.editor-image {\r\n  color: #56b6c2;\r\n}\r\n\r\n.editor-list {\r\n  color: #c678dd;\r\n}\r\n\r\n.editor-blockquote {\r\n  color: #98c379;\r\n  border-left: 3px solid #98c379;\r\n  padding-left: 8px;\r\n}\r\n\r\n.editor-hr {\r\n  color: #abb2bf;\r\n}\r\n\r\n/* Lenguajes específicos */\r\n/* JavaScript */\r\n.editor-keyword {\r\n  color: #c678dd;\r\n  font-weight: bold;\r\n}\r\n\r\n.editor-string {\r\n  color: #98c379;\r\n}\r\n\r\n.editor-number {\r\n  color: #d19a66;\r\n}\r\n\r\n.editor-comment {\r\n  color: #7f848e;\r\n  font-style: italic;\r\n}\r\n\r\n/* HTML - Colores más vibrantes */\r\n.editor-tag-open, .editor-tag-close {\r\n  color: #e06c75;\r\n}\r\n\r\n.editor-attr-name {\r\n  color: #d19a66;\r\n}\r\n\r\n.editor-attr-value {\r\n  color: #98c379;\r\n}\r\n\r\n.editor-doctype {\r\n  color: #7f848e;\r\n}\r\n\r\n/* CSS */\r\n.editor-css-property {\r\n  color: #56b6c2;\r\n}\r\n\r\n.editor-css-value {\r\n  color: #98c379;\r\n}\r\n\r\n.editor-css-selector {\r\n  color: #c678dd;\r\n}\r\n\r\n/* Líneas numeradas */\r\n.syntax-highlight-editor {\r\n  counter-reset: line;\r\n  padding-left: 60px;\r\n}\r\n\r\n.syntax-highlight-editor div {\r\n  position: relative;\r\n  min-height: 1.5em;\r\n}\r\n\r\n.syntax-highlight-editor div:before {\r\n  content: counter(line);\r\n  counter-increment: line;\r\n  position: absolute;\r\n  left: -50px;\r\n  top: 0;\r\n  width: 40px;\r\n  color: #636d83;\r\n  text-align: right;\r\n  user-select: none;\r\n  opacity: 0.5;\r\n}\r\n\r\n/* Líneas vacías */\r\n.syntax-highlight-editor div:empty {\r\n  min-height: 1.5em;\r\n}\r\n\r\n.syntax-highlight-editor div:empty:after {\r\n  content: \" \";\r\n}\r\n\r\n/* Scrollbars personalizados */\r\n.syntax-highlight-editor::-webkit-scrollbar {\r\n  width: 10px;\r\n  height: 10px;\r\n}\r\n\r\n.syntax-highlight-editor::-webkit-scrollbar-track {\r\n  background: #2d2d2d;\r\n  border-radius: 3px;\r\n}\r\n\r\n.syntax-highlight-editor::-webkit-scrollbar-thumb {\r\n  background: #555;\r\n  border-radius: 3px;\r\n}\r\n\r\n.syntax-highlight-editor::-webkit-scrollbar-thumb:hover {\r\n  background: #777;\r\n}\r\n`;\r\n\r\n// Exportamos las funciones y estilos\r\nexport { applySyntaxHighlighting, syntaxHighlightingStyles };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}