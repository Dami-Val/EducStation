{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damva\\\\EducStation\\\\src\\\\components\\\\admin\\\\SyntaxHighlighter.jsx\",\n  _s = $RefreshSig$();\n// src/components/admin/SyntaxHighlighter.jsx\nimport React, { useEffect, useRef } from 'react';\n\n/**\r\n * Componente que proporciona resaltado de sintaxis para el editor HTML\r\n * \r\n * @param {Object} props - Propiedades del componente\r\n * @param {string} props.content - El contenido a resaltar\r\n * @param {function} props.onChange - Función para manejar cambios en el contenido\r\n * @param {Object} props.textAreaRef - Referencia al textarea original\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SyntaxHighlighter = ({\n  content,\n  onChange,\n  textAreaRef\n}) => {\n  _s();\n  const highlighterRef = useRef(null);\n  const containerRef = useRef(null);\n\n  // Sincronizar scroll entre el textArea y el resaltador\n  const syncScroll = () => {\n    if (highlighterRef.current && textAreaRef.current) {\n      highlighterRef.current.scrollTop = textAreaRef.current.scrollTop;\n      highlighterRef.current.scrollLeft = textAreaRef.current.scrollLeft;\n    }\n  };\n\n  // Actualizar el contenido resaltado cuando cambia el contenido\n  useEffect(() => {\n    if (highlighterRef.current && textAreaRef.current) {\n      try {\n        // Aplicar el resaltado de sintaxis HTML\n        const highlightedContent = applySyntaxHighlightingHTML(content);\n        highlighterRef.current.innerHTML = highlightedContent;\n\n        // Configurar event listeners\n        textAreaRef.current.addEventListener('scroll', syncScroll);\n      } catch (error) {\n        console.error(\"Error applying syntax highlighting:\", error);\n      }\n\n      // Limpiar event listeners\n      return () => {\n        if (textAreaRef.current) {\n          textAreaRef.current.removeEventListener('scroll', syncScroll);\n        }\n      };\n    }\n  }, [content]);\n\n  // Manejar cambios en el texto\n  const handleChange = e => {\n    // Ignorar cualquier evento extraño o inserción automática\n    if (e && e.target && typeof e.target.value === 'string') {\n      let cleanValue = e.target.value;\n\n      // Limpieza para HTML\n      // 1. Eliminar todas las etiquetas span y sus atributos\n      cleanValue = cleanValue.replace(/<span[^>]*>(.*?)<\\/span>/g, '$1');\n\n      // 2. Eliminar cualquier atributo data-* o class\n      cleanValue = cleanValue.replace(/\\s(data-[^=]*|class)=\"[^\"]*\"/g, '');\n\n      // 3. Si hay etiquetas HTML mal formadas, intentamos arreglarlas\n      cleanValue = cleanValue.replace(/(&lt;|<)data-[^>]*>|<\\/data-[^>]*(&gt;|>)/g, '');\n\n      // 4. Eliminar cualquier etiqueta span vacía remanente\n      cleanValue = cleanValue.replace(/<span><\\/span>/g, '');\n\n      // Crear un evento limpio para pasar al padre\n      const cleanEvent = {\n        target: {\n          name: 'content',\n          value: cleanValue\n        }\n      };\n      onChange(cleanEvent);\n    } else {\n      onChange(e);\n    }\n  };\n\n  // Manejar eventos de teclado (Tab, Enter, etc.)\n  const handleKeyDown = e => {\n    // Implementar tabulación personalizada con 2 espacios\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      const start = e.target.selectionStart;\n      const end = e.target.selectionEnd;\n\n      // Obtener el valor del textarea\n      const value = e.target.value;\n\n      // Insertar 2 espacios en la posición actual\n      const newValue = value.substring(0, start) + '  ' + value.substring(end);\n\n      // Establecer el nuevo valor\n      e.target.value = newValue;\n\n      // Mover el cursor después de los espacios insertados\n      e.target.selectionStart = e.target.selectionEnd = start + 2;\n\n      // Disparar evento de cambio\n      const event = {\n        target: {\n          name: 'content',\n          value: newValue\n        }\n      };\n      handleChange(event);\n    }\n  };\n\n  // Función para escapar HTML\n  const escapeHtml = unsafe => {\n    return unsafe.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n  };\n\n  // Función para aplicar color al HTML\n  const applySyntaxHighlightingHTML = html => {\n    if (!html) return \"<div>&nbsp;</div>\"; // Devuelve al menos una línea vacía\n\n    // Escapar el HTML primero\n    const escapedContent = escapeHtml(html);\n\n    // Dividir en líneas para procesar\n    const lines = escapedContent.split('\\n');\n\n    // Aplicar colores a cada línea\n    const coloredLines = lines.map(line => {\n      // Etiquetas HTML\n      let coloredLine = line.replace(/(&lt;\\/?[a-zA-Z0-9]+)(\\s|&gt;)/g, '<span class=\"html-tag\">$1</span>$2');\n\n      // Atributos\n      coloredLine = coloredLine.replace(/(\\s+)([a-zA-Z0-9_-]+)(=)/g, '$1<span class=\"html-attr\">$2</span>$3');\n\n      // Valores\n      coloredLine = coloredLine.replace(/(=)(&quot;[^&]*&quot;|&#039;[^&]*&#039;)/g, '$1<span class=\"html-value\">$2</span>');\n\n      // Comentarios HTML\n      coloredLine = coloredLine.replace(/(&lt;!--[^>]*--&gt;)/g, '<span class=\"html-comment\">$1</span>');\n      return coloredLine;\n    });\n\n    // Crear divs para cada línea\n    const createDivs = htmlContent => {\n      const lineArray = htmlContent.split('\\n');\n      return lineArray.map(line => `<div>${line || \"&nbsp;\"}</div>`).join('');\n    };\n    return createDivs(coloredLines.join('\\n'));\n  };\n\n  // Estilos para el componente\n  const styles = {\n    container: {\n      position: 'relative',\n      width: '100%',\n      height: '600px',\n      fontSize: '14px',\n      lineHeight: 1.5,\n      overflow: 'hidden',\n      borderRadius: '8px',\n      border: '1px solid #e1e4e8'\n    },\n    highlighter: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      padding: '16px',\n      backgroundColor: '#1e1e1e',\n      color: '#d4d4d4',\n      fontFamily: \"'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace\",\n      fontSize: '14px',\n      lineHeight: 1.5,\n      overflow: 'auto',\n      whiteSpace: 'pre',\n      pointerEvents: 'none',\n      zIndex: 1\n    },\n    textarea: {\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      padding: '16px',\n      color: 'transparent',\n      caretColor: '#f8f8f8',\n      backgroundColor: 'transparent',\n      fontFamily: \"'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace\",\n      fontSize: '14px',\n      lineHeight: 1.5,\n      border: 'none',\n      resize: 'none',\n      whiteSpace: 'pre',\n      overflow: 'auto',\n      outline: 'none',\n      zIndex: 2\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      dangerouslySetInnerHTML: {\n        __html: `\n        .html-tag { color: #e06c75; }\n        .html-attr { color: #d19a66; }\n        .html-value { color: #98c379; }\n        .html-comment { color: #7f848e; font-style: italic; }\n        \n        /* Líneas numeradas */\n        .syntax-highlight-editor {\n          counter-reset: line;\n          padding-left: 60px;\n        }\n        \n        .syntax-highlight-editor div {\n          position: relative;\n          min-height: 1.5em;\n        }\n        \n        .syntax-highlight-editor div:before {\n          content: counter(line);\n          counter-increment: line;\n          position: absolute;\n          left: -50px;\n          top: 0;\n          width: 40px;\n          color: #636d83;\n          text-align: right;\n          user-select: none;\n          opacity: 0.5;\n        }\n      `\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      ref: highlighterRef,\n      className: \"syntax-highlight-editor\",\n      style: styles.highlighter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textAreaRef,\n      value: content,\n      onChange: handleChange,\n      onKeyDown: handleKeyDown,\n      onScroll: syncScroll,\n      style: styles.textarea,\n      spellCheck: \"false\",\n      placeholder: \"Escribe c\\xF3digo HTML aqu\\xED...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(SyntaxHighlighter, \"Xd0m4KXWVq9wjYwweA1FMrQUCSI=\");\n_c = SyntaxHighlighter;\nexport default SyntaxHighlighter;\nvar _c;\n$RefreshReg$(_c, \"SyntaxHighlighter\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","SyntaxHighlighter","content","onChange","textAreaRef","_s","highlighterRef","containerRef","syncScroll","current","scrollTop","scrollLeft","highlightedContent","applySyntaxHighlightingHTML","innerHTML","addEventListener","error","console","removeEventListener","handleChange","e","target","value","cleanValue","replace","cleanEvent","name","handleKeyDown","key","preventDefault","start","selectionStart","end","selectionEnd","newValue","substring","event","escapeHtml","unsafe","html","escapedContent","lines","split","coloredLines","map","line","coloredLine","createDivs","htmlContent","lineArray","join","styles","container","position","width","height","fontSize","lineHeight","overflow","borderRadius","border","highlighter","top","left","padding","backgroundColor","color","fontFamily","whiteSpace","pointerEvents","zIndex","textarea","caretColor","resize","outline","ref","style","children","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","className","onKeyDown","onScroll","spellCheck","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/damva/EducStation/src/components/admin/SyntaxHighlighter.jsx"],"sourcesContent":["// src/components/admin/SyntaxHighlighter.jsx\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\n/**\r\n * Componente que proporciona resaltado de sintaxis para el editor HTML\r\n * \r\n * @param {Object} props - Propiedades del componente\r\n * @param {string} props.content - El contenido a resaltar\r\n * @param {function} props.onChange - Función para manejar cambios en el contenido\r\n * @param {Object} props.textAreaRef - Referencia al textarea original\r\n */\r\nconst SyntaxHighlighter = ({ content, onChange, textAreaRef }) => {\r\n  const highlighterRef = useRef(null);\r\n  const containerRef = useRef(null);\r\n  \r\n  // Sincronizar scroll entre el textArea y el resaltador\r\n  const syncScroll = () => {\r\n    if (highlighterRef.current && textAreaRef.current) {\r\n      highlighterRef.current.scrollTop = textAreaRef.current.scrollTop;\r\n      highlighterRef.current.scrollLeft = textAreaRef.current.scrollLeft;\r\n    }\r\n  };\r\n\r\n  // Actualizar el contenido resaltado cuando cambia el contenido\r\n  useEffect(() => {\r\n    if (highlighterRef.current && textAreaRef.current) {\r\n      try {\r\n        // Aplicar el resaltado de sintaxis HTML\r\n        const highlightedContent = applySyntaxHighlightingHTML(content);\r\n        highlighterRef.current.innerHTML = highlightedContent;\r\n        \r\n        // Configurar event listeners\r\n        textAreaRef.current.addEventListener('scroll', syncScroll);\r\n        \r\n      } catch (error) {\r\n        console.error(\"Error applying syntax highlighting:\", error);\r\n      }\r\n      \r\n      // Limpiar event listeners\r\n      return () => {\r\n        if (textAreaRef.current) {\r\n          textAreaRef.current.removeEventListener('scroll', syncScroll);\r\n        }\r\n      };\r\n    }\r\n  }, [content]);\r\n\r\n  // Manejar cambios en el texto\r\n  const handleChange = (e) => {\r\n    // Ignorar cualquier evento extraño o inserción automática\r\n    if (e && e.target && typeof e.target.value === 'string') {\r\n      let cleanValue = e.target.value;\r\n      \r\n      // Limpieza para HTML\r\n      // 1. Eliminar todas las etiquetas span y sus atributos\r\n      cleanValue = cleanValue.replace(/<span[^>]*>(.*?)<\\/span>/g, '$1');\r\n      \r\n      // 2. Eliminar cualquier atributo data-* o class\r\n      cleanValue = cleanValue.replace(/\\s(data-[^=]*|class)=\"[^\"]*\"/g, '');\r\n      \r\n      // 3. Si hay etiquetas HTML mal formadas, intentamos arreglarlas\r\n      cleanValue = cleanValue.replace(/(&lt;|<)data-[^>]*>|<\\/data-[^>]*(&gt;|>)/g, '');\r\n      \r\n      // 4. Eliminar cualquier etiqueta span vacía remanente\r\n      cleanValue = cleanValue.replace(/<span><\\/span>/g, '');\r\n      \r\n      // Crear un evento limpio para pasar al padre\r\n      const cleanEvent = {\r\n        target: {\r\n          name: 'content',\r\n          value: cleanValue\r\n        }\r\n      };\r\n      \r\n      onChange(cleanEvent);\r\n    } else {\r\n      onChange(e);\r\n    }\r\n  };\r\n\r\n  // Manejar eventos de teclado (Tab, Enter, etc.)\r\n  const handleKeyDown = (e) => {\r\n    // Implementar tabulación personalizada con 2 espacios\r\n    if (e.key === 'Tab') {\r\n      e.preventDefault();\r\n      \r\n      const start = e.target.selectionStart;\r\n      const end = e.target.selectionEnd;\r\n      \r\n      // Obtener el valor del textarea\r\n      const value = e.target.value;\r\n      \r\n      // Insertar 2 espacios en la posición actual\r\n      const newValue = value.substring(0, start) + '  ' + value.substring(end);\r\n      \r\n      // Establecer el nuevo valor\r\n      e.target.value = newValue;\r\n      \r\n      // Mover el cursor después de los espacios insertados\r\n      e.target.selectionStart = e.target.selectionEnd = start + 2;\r\n      \r\n      // Disparar evento de cambio\r\n      const event = {\r\n        target: {\r\n          name: 'content',\r\n          value: newValue\r\n        }\r\n      };\r\n      handleChange(event);\r\n    }\r\n  };\r\n\r\n  // Función para escapar HTML\r\n  const escapeHtml = (unsafe) => {\r\n    return unsafe\r\n      .replace(/&/g, \"&amp;\")\r\n      .replace(/</g, \"&lt;\")\r\n      .replace(/>/g, \"&gt;\")\r\n      .replace(/\"/g, \"&quot;\")\r\n      .replace(/'/g, \"&#039;\");\r\n  };\r\n\r\n  // Función para aplicar color al HTML\r\n  const applySyntaxHighlightingHTML = (html) => {\r\n    if (!html) return \"<div>&nbsp;</div>\"; // Devuelve al menos una línea vacía\r\n    \r\n    // Escapar el HTML primero\r\n    const escapedContent = escapeHtml(html);\r\n    \r\n    // Dividir en líneas para procesar\r\n    const lines = escapedContent.split('\\n');\r\n    \r\n    // Aplicar colores a cada línea\r\n    const coloredLines = lines.map(line => {\r\n      // Etiquetas HTML\r\n      let coloredLine = line.replace(/(&lt;\\/?[a-zA-Z0-9]+)(\\s|&gt;)/g, '<span class=\"html-tag\">$1</span>$2');\r\n      \r\n      // Atributos\r\n      coloredLine = coloredLine.replace(/(\\s+)([a-zA-Z0-9_-]+)(=)/g, '$1<span class=\"html-attr\">$2</span>$3');\r\n      \r\n      // Valores\r\n      coloredLine = coloredLine.replace(/(=)(&quot;[^&]*&quot;|&#039;[^&]*&#039;)/g, '$1<span class=\"html-value\">$2</span>');\r\n      \r\n      // Comentarios HTML\r\n      coloredLine = coloredLine.replace(/(&lt;!--[^>]*--&gt;)/g, '<span class=\"html-comment\">$1</span>');\r\n      \r\n      return coloredLine;\r\n    });\r\n    \r\n    // Crear divs para cada línea\r\n    const createDivs = (htmlContent) => {\r\n      const lineArray = htmlContent.split('\\n');\r\n      return lineArray.map(line => `<div>${line || \"&nbsp;\"}</div>`).join('');\r\n    };\r\n    \r\n    return createDivs(coloredLines.join('\\n'));\r\n  };\r\n\r\n  // Estilos para el componente\r\n  const styles = {\r\n    container: {\r\n      position: 'relative',\r\n      width: '100%',\r\n      height: '600px',\r\n      fontSize: '14px',\r\n      lineHeight: 1.5,\r\n      overflow: 'hidden',\r\n      borderRadius: '8px',\r\n      border: '1px solid #e1e4e8'\r\n    },\r\n    highlighter: {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: 0,\r\n      width: '100%',\r\n      height: '100%',\r\n      padding: '16px',\r\n      backgroundColor: '#1e1e1e',\r\n      color: '#d4d4d4',\r\n      fontFamily: \"'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace\",\r\n      fontSize: '14px',\r\n      lineHeight: 1.5,\r\n      overflow: 'auto',\r\n      whiteSpace: 'pre',\r\n      pointerEvents: 'none',\r\n      zIndex: 1\r\n    },\r\n    textarea: {\r\n      position: 'absolute',\r\n      top: 0,\r\n      left: 0,\r\n      width: '100%',\r\n      height: '100%',\r\n      padding: '16px',\r\n      color: 'transparent',\r\n      caretColor: '#f8f8f8',\r\n      backgroundColor: 'transparent',\r\n      fontFamily: \"'Cascadia Code', 'Consolas', 'Monaco', 'Courier New', monospace\",\r\n      fontSize: '14px',\r\n      lineHeight: 1.5,\r\n      border: 'none',\r\n      resize: 'none',\r\n      whiteSpace: 'pre',\r\n      overflow: 'auto',\r\n      outline: 'none',\r\n      zIndex: 2\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div ref={containerRef} style={styles.container}>\r\n      {/* Estilos para el resaltado de sintaxis */}\r\n      <style dangerouslySetInnerHTML={{ __html: `\r\n        .html-tag { color: #e06c75; }\r\n        .html-attr { color: #d19a66; }\r\n        .html-value { color: #98c379; }\r\n        .html-comment { color: #7f848e; font-style: italic; }\r\n        \r\n        /* Líneas numeradas */\r\n        .syntax-highlight-editor {\r\n          counter-reset: line;\r\n          padding-left: 60px;\r\n        }\r\n        \r\n        .syntax-highlight-editor div {\r\n          position: relative;\r\n          min-height: 1.5em;\r\n        }\r\n        \r\n        .syntax-highlight-editor div:before {\r\n          content: counter(line);\r\n          counter-increment: line;\r\n          position: absolute;\r\n          left: -50px;\r\n          top: 0;\r\n          width: 40px;\r\n          color: #636d83;\r\n          text-align: right;\r\n          user-select: none;\r\n          opacity: 0.5;\r\n        }\r\n      ` }} />\r\n      \r\n      {/* Capa de resaltado (solo visual) */}\r\n      <pre \r\n        ref={highlighterRef}\r\n        className=\"syntax-highlight-editor\"\r\n        style={styles.highlighter}\r\n      />\r\n      \r\n      {/* Textarea para edición (visible pero con texto transparente) */}\r\n      <textarea\r\n        ref={textAreaRef}\r\n        value={content}\r\n        onChange={handleChange}\r\n        onKeyDown={handleKeyDown}\r\n        onScroll={syncScroll}\r\n        style={styles.textarea}\r\n        spellCheck=\"false\"\r\n        placeholder=\"Escribe código HTML aquí...\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default SyntaxHighlighter;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}