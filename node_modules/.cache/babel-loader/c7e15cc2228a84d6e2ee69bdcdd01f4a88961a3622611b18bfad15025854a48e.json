{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damva\\\\EducStation\\\\src\\\\components\\\\admin\\\\SimpleEditor.jsx\",\n  _s = $RefreshSig$();\n// src/components/admin/SimpleEditor.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport { colors, spacing, typography, shadows, borderRadius } from '../../styles/theme';\nimport SimpleEditorToolbar from './SimpleEditorToolbar';\nimport FloatingToolbar from './FloatingToolbar'; // Importamos nuestra nueva barra flotante\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleEditor = ({\n  content,\n  onChange\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  const [internalContent, setInternalContent] = useState(content || '');\n  const [activeFormats, setActiveFormats] = useState({\n    bold: false,\n    italic: false,\n    underline: false,\n    h1: false,\n    h2: false,\n    h3: false,\n    unorderedList: false,\n    orderedList: false,\n    link: false\n  });\n\n  // Initialize the editor with content\n  useEffect(() => {\n    if (editorRef.current) {\n      // Make editable\n      editorRef.current.contentEditable = true;\n\n      // Set initial content\n      if (content && content !== internalContent) {\n        editorRef.current.innerHTML = content;\n        setInternalContent(content);\n      }\n\n      // Focus if empty\n      if (!content) {\n        setTimeout(() => {\n          editorRef.current.focus();\n        }, 100);\n      }\n\n      // Add event listener for selection change to check active formats\n      document.addEventListener('selectionchange', checkActiveFormats);\n      return () => {\n        document.removeEventListener('selectionchange', checkActiveFormats);\n      };\n    }\n  }, [content]);\n\n  // Track content changes and notify parent\n  const handleContentChange = () => {\n    if (editorRef.current) {\n      const newContent = editorRef.current.innerHTML;\n      setInternalContent(newContent);\n      onChange(newContent);\n    }\n  };\n\n  // Check which formats are currently active\n  const checkActiveFormats = () => {\n    if (!document.activeElement || document.activeElement !== editorRef.current) {\n      return;\n    }\n    try {\n      // Basic formatting commands\n      const formats = {\n        bold: document.queryCommandState('bold'),\n        italic: document.queryCommandState('italic'),\n        underline: document.queryCommandState('underline'),\n        unorderedList: document.queryCommandState('insertUnorderedList'),\n        orderedList: document.queryCommandState('insertOrderedList'),\n        link: document.queryCommandState('createLink')\n      };\n\n      // Check for headings\n      const selection = window.getSelection();\n      if (selection && selection.rangeCount > 0) {\n        const range = selection.getRangeAt(0);\n        let element = range.commonAncestorContainer;\n\n        // Navigate to element node if we're in a text node\n        if (element.nodeType === 3) {\n          element = element.parentNode;\n        }\n\n        // Check parent nodes for heading tags\n        let currentNode = element;\n        while (currentNode && currentNode !== editorRef.current) {\n          var _currentNode$tagName;\n          const tagName = (_currentNode$tagName = currentNode.tagName) === null || _currentNode$tagName === void 0 ? void 0 : _currentNode$tagName.toLowerCase();\n          if (tagName === 'h1') formats.h1 = true;\n          if (tagName === 'h2') formats.h2 = true;\n          if (tagName === 'h3') formats.h3 = true;\n          currentNode = currentNode.parentNode;\n        }\n      }\n      setActiveFormats(formats);\n    } catch (e) {\n      console.error('Error checking active formats:', e);\n    }\n  };\n\n  // Apply formatting commands\n  const applyFormat = (command, value = null) => {\n    if (!editorRef.current) return;\n\n    // Ensure the editor has focus\n    if (document.activeElement !== editorRef.current) {\n      editorRef.current.focus();\n    }\n    try {\n      // For some commands we need special handling\n      switch (command) {\n        case 'h1':\n        case 'h2':\n        case 'h3':\n          applyHeadingFormat(command);\n          break;\n        case 'textColor':\n          const color = prompt('Introduzca un color (ej. #0b4444, red, etc):', '#0b4444');\n          if (color) {\n            document.execCommand('foreColor', false, color);\n          }\n          break;\n        case 'link':\n          const url = prompt('Introduzca la URL del enlace:', 'https://');\n          if (url) {\n            document.execCommand('createLink', false, url);\n          }\n          break;\n        case 'image':\n          handleImageInsert();\n          break;\n        case 'unorderedList':\n          document.execCommand('insertUnorderedList', false, null);\n          break;\n        case 'orderedList':\n          document.execCommand('insertOrderedList', false, null);\n          break;\n        case 'fontSize':\n          // Aplicar el tamaño de fuente usando el elemento span\n          if (value) {\n            // Crear un span con el estilo de tamaño de fuente\n            const size = parseFloat(value);\n            document.execCommand('fontSize', false, '7'); // Usamos 7 como valor temporal\n\n            // Después modificamos los elementos con fontSize=7 para usar el valor real\n            const selection = window.getSelection();\n            if (selection.rangeCount > 0) {\n              const fontElements = document.querySelectorAll('font[size=\"7\"]');\n              fontElements.forEach(element => {\n                element.removeAttribute('size');\n                element.style.fontSize = value;\n              });\n            }\n\n            // Notificar a las barras de herramientas sobre el cambio\n            // para mantener la sincronización\n            checkActiveFormats();\n          }\n          break;\n        default:\n          // For basic formatting (bold, italic, underline)\n          document.execCommand(command, false, value);\n      }\n\n      // Update content and check for active formats\n      handleContentChange();\n      checkActiveFormats();\n    } catch (e) {\n      console.error(`Error applying format ${command}:`, e);\n    }\n  };\n\n  // Special handling for heading formats\n  const applyHeadingFormat = headingType => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    // Get the current selection\n    const range = selection.getRangeAt(0);\n    const selectedElement = range.commonAncestorContainer;\n\n    // Find the block element that contains the selection\n    let blockElement = selectedElement;\n    if (blockElement.nodeType === 3) {\n      // Text node\n      blockElement = blockElement.parentNode;\n    }\n\n    // Find the highest block-level element within the editor\n    while (blockElement !== null && blockElement.parentNode !== editorRef.current && blockElement !== editorRef.current) {\n      blockElement = blockElement.parentNode;\n    }\n\n    // Save the selection content\n    const content = range.cloneContents();\n\n    // Create the new heading element\n    const newHeading = document.createElement(headingType);\n\n    // If we have an empty selection, preserve the block element's content\n    if (range.collapsed) {\n      newHeading.innerHTML = blockElement.innerHTML;\n    } else {\n      // Otherwise use the selected content\n      newHeading.appendChild(content);\n    }\n\n    // Replace the block element with our new heading\n    if (blockElement !== editorRef.current) {\n      blockElement.parentNode.replaceChild(newHeading, blockElement);\n    } else {\n      // If the blockElement is the editor itself, just insert at selection\n      range.deleteContents();\n      range.insertNode(newHeading);\n    }\n  };\n\n  // Handle image insertion\n  const handleImageInsert = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.onchange = e => {\n      const file = e.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          document.execCommand('insertImage', false, event.target.result);\n          handleContentChange();\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    input.click();\n  };\n\n  // Handle paste events\n  const handlePaste = e => {\n    var _e$clipboardData;\n    // Check for images in clipboard\n    const items = (_e$clipboardData = e.clipboardData) === null || _e$clipboardData === void 0 ? void 0 : _e$clipboardData.items;\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].type.indexOf('image') !== -1) {\n          e.preventDefault();\n\n          // Get image from clipboard\n          const blob = items[i].getAsFile();\n          const reader = new FileReader();\n          reader.onload = event => {\n            // Insert the image\n            document.execCommand('insertImage', false, event.target.result);\n            handleContentChange();\n          };\n          reader.readAsDataURL(blob);\n          return;\n        }\n      }\n    }\n  };\n\n  // Handle key commands\n  const handleKeyDown = e => {\n    // Support for tab\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      document.execCommand('insertHTML', false, '&nbsp;&nbsp;&nbsp;&nbsp;');\n      return;\n    }\n  };\n\n  // Handle drag and drop for images\n  const handleDrop = e => {\n    e.preventDefault();\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          document.execCommand('insertImage', false, event.target.result);\n          handleContentChange();\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  };\n\n  // Styles for the editor\n  const styles = {\n    container: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      backgroundColor: colors.white,\n      borderRadius: borderRadius.md\n    },\n    editor: {\n      width: '100%',\n      height: 'calc(100% - 40px)',\n      // Account for toolbar height\n      padding: spacing.xl,\n      outline: 'none',\n      overflow: 'auto',\n      color: colors.textPrimary,\n      fontFamily: typography.fontFamily,\n      fontSize: typography.fontSize.md,\n      lineHeight: 1.6\n    },\n    placeholder: {\n      position: 'absolute',\n      top: '40px',\n      // Below toolbar\n      left: spacing.xl,\n      padding: spacing.xl,\n      color: colors.gray300,\n      pointerEvents: 'none'\n    }\n  };\n\n  // Initialize content with default font size\n  useEffect(() => {\n    if (editorRef.current && !content) {\n      // Si el contenido está vacío, establecer el tamaño de fuente predeterminado\n      editorRef.current.style.fontSize = '12px';\n    }\n  }, [content]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(SimpleEditorToolbar, {\n      onFormatText: applyFormat,\n      activeFormats: activeFormats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingToolbar, {\n      onFormatText: applyFormat,\n      activeFormats: activeFormats,\n      editorRef: editorRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), (!internalContent || internalContent === '<p><br></p>' || internalContent === '<br>') && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.placeholder,\n      children: \"Comienza a escribir...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: editorRef,\n      style: {\n        ...styles.editor,\n        fontSize: '12px'\n      } // Establecer tamaño predeterminado\n      ,\n      onInput: handleContentChange,\n      onBlur: handleContentChange,\n      onKeyDown: handleKeyDown,\n      onClick: checkActiveFormats,\n      onKeyUp: checkActiveFormats,\n      onMouseUp: checkActiveFormats,\n      onPaste: handlePaste,\n      onDrop: handleDrop,\n      onDragOver: e => e.preventDefault()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleEditor, \"wx2SvVK6zrYgEx9P/DeI/rw1HIk=\");\n_c = SimpleEditor;\nexport default SimpleEditor;\nvar _c;\n$RefreshReg$(_c, \"SimpleEditor\");","map":{"version":3,"names":["React","useState","useRef","useEffect","colors","spacing","typography","shadows","borderRadius","SimpleEditorToolbar","FloatingToolbar","jsxDEV","_jsxDEV","SimpleEditor","content","onChange","_s","editorRef","internalContent","setInternalContent","activeFormats","setActiveFormats","bold","italic","underline","h1","h2","h3","unorderedList","orderedList","link","current","contentEditable","innerHTML","setTimeout","focus","document","addEventListener","checkActiveFormats","removeEventListener","handleContentChange","newContent","activeElement","formats","queryCommandState","selection","window","getSelection","rangeCount","range","getRangeAt","element","commonAncestorContainer","nodeType","parentNode","currentNode","_currentNode$tagName","tagName","toLowerCase","e","console","error","applyFormat","command","value","applyHeadingFormat","color","prompt","execCommand","url","handleImageInsert","size","parseFloat","fontElements","querySelectorAll","forEach","removeAttribute","style","fontSize","headingType","selectedElement","blockElement","cloneContents","newHeading","createElement","collapsed","appendChild","replaceChild","deleteContents","insertNode","input","type","accept","onchange","file","target","files","reader","FileReader","onload","event","result","readAsDataURL","click","handlePaste","_e$clipboardData","items","clipboardData","i","length","indexOf","preventDefault","blob","getAsFile","handleKeyDown","key","handleDrop","dataTransfer","startsWith","styles","container","position","width","height","backgroundColor","white","md","editor","padding","xl","outline","overflow","textPrimary","fontFamily","lineHeight","placeholder","top","left","gray300","pointerEvents","children","onFormatText","fileName","_jsxFileName","lineNumber","columnNumber","ref","onInput","onBlur","onKeyDown","onClick","onKeyUp","onMouseUp","onPaste","onDrop","onDragOver","_c","$RefreshReg$"],"sources":["C:/Users/damva/EducStation/src/components/admin/SimpleEditor.jsx"],"sourcesContent":["// src/components/admin/SimpleEditor.jsx\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { colors, spacing, typography, shadows, borderRadius } from '../../styles/theme';\r\nimport SimpleEditorToolbar from './SimpleEditorToolbar';\r\nimport FloatingToolbar from './FloatingToolbar'; // Importamos nuestra nueva barra flotante\r\n\r\nconst SimpleEditor = ({ content, onChange }) => {\r\n  const editorRef = useRef(null);\r\n  const [internalContent, setInternalContent] = useState(content || '');\r\n  const [activeFormats, setActiveFormats] = useState({\r\n    bold: false,\r\n    italic: false,\r\n    underline: false,\r\n    h1: false,\r\n    h2: false,\r\n    h3: false,\r\n    unorderedList: false,\r\n    orderedList: false,\r\n    link: false,\r\n  });\r\n\r\n  // Initialize the editor with content\r\n  useEffect(() => {\r\n    if (editorRef.current) {\r\n      // Make editable\r\n      editorRef.current.contentEditable = true;\r\n      \r\n      // Set initial content\r\n      if (content && content !== internalContent) {\r\n        editorRef.current.innerHTML = content;\r\n        setInternalContent(content);\r\n      }\r\n      \r\n      // Focus if empty\r\n      if (!content) {\r\n        setTimeout(() => {\r\n          editorRef.current.focus();\r\n        }, 100);\r\n      }\r\n      \r\n      // Add event listener for selection change to check active formats\r\n      document.addEventListener('selectionchange', checkActiveFormats);\r\n      \r\n      return () => {\r\n        document.removeEventListener('selectionchange', checkActiveFormats);\r\n      };\r\n    }\r\n  }, [content]);\r\n\r\n  // Track content changes and notify parent\r\n  const handleContentChange = () => {\r\n    if (editorRef.current) {\r\n      const newContent = editorRef.current.innerHTML;\r\n      setInternalContent(newContent);\r\n      onChange(newContent);\r\n    }\r\n  };\r\n\r\n  // Check which formats are currently active\r\n  const checkActiveFormats = () => {\r\n    if (!document.activeElement || document.activeElement !== editorRef.current) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Basic formatting commands\r\n      const formats = {\r\n        bold: document.queryCommandState('bold'),\r\n        italic: document.queryCommandState('italic'),\r\n        underline: document.queryCommandState('underline'),\r\n        unorderedList: document.queryCommandState('insertUnorderedList'),\r\n        orderedList: document.queryCommandState('insertOrderedList'),\r\n        link: document.queryCommandState('createLink')\r\n      };\r\n      \r\n      // Check for headings\r\n      const selection = window.getSelection();\r\n      if (selection && selection.rangeCount > 0) {\r\n        const range = selection.getRangeAt(0);\r\n        let element = range.commonAncestorContainer;\r\n        \r\n        // Navigate to element node if we're in a text node\r\n        if (element.nodeType === 3) {\r\n          element = element.parentNode;\r\n        }\r\n        \r\n        // Check parent nodes for heading tags\r\n        let currentNode = element;\r\n        while (currentNode && currentNode !== editorRef.current) {\r\n          const tagName = currentNode.tagName?.toLowerCase();\r\n          if (tagName === 'h1') formats.h1 = true;\r\n          if (tagName === 'h2') formats.h2 = true;\r\n          if (tagName === 'h3') formats.h3 = true;\r\n          \r\n          currentNode = currentNode.parentNode;\r\n        }\r\n      }\r\n      \r\n      setActiveFormats(formats);\r\n    } catch (e) {\r\n      console.error('Error checking active formats:', e);\r\n    }\r\n  };\r\n\r\n  // Apply formatting commands\r\n  const applyFormat = (command, value = null) => {\r\n    if (!editorRef.current) return;\r\n    \r\n    // Ensure the editor has focus\r\n    if (document.activeElement !== editorRef.current) {\r\n      editorRef.current.focus();\r\n    }\r\n    \r\n    try {\r\n      // For some commands we need special handling\r\n      switch (command) {\r\n        case 'h1':\r\n        case 'h2':\r\n        case 'h3':\r\n          applyHeadingFormat(command);\r\n          break;\r\n        case 'textColor':\r\n          const color = prompt('Introduzca un color (ej. #0b4444, red, etc):', '#0b4444');\r\n          if (color) {\r\n            document.execCommand('foreColor', false, color);\r\n          }\r\n          break;\r\n        case 'link':\r\n          const url = prompt('Introduzca la URL del enlace:', 'https://');\r\n          if (url) {\r\n            document.execCommand('createLink', false, url);\r\n          }\r\n          break;\r\n        case 'image':\r\n          handleImageInsert();\r\n          break;\r\n        case 'unorderedList':\r\n          document.execCommand('insertUnorderedList', false, null);\r\n          break;\r\n        case 'orderedList':\r\n          document.execCommand('insertOrderedList', false, null);\r\n          break;\r\n        case 'fontSize':\r\n          // Aplicar el tamaño de fuente usando el elemento span\r\n          if (value) {\r\n            // Crear un span con el estilo de tamaño de fuente\r\n            const size = parseFloat(value);\r\n            document.execCommand('fontSize', false, '7'); // Usamos 7 como valor temporal\r\n            \r\n            // Después modificamos los elementos con fontSize=7 para usar el valor real\r\n            const selection = window.getSelection();\r\n            if (selection.rangeCount > 0) {\r\n              const fontElements = document.querySelectorAll('font[size=\"7\"]');\r\n              \r\n              fontElements.forEach(element => {\r\n                element.removeAttribute('size');\r\n                element.style.fontSize = value;\r\n              });\r\n            }\r\n            \r\n            // Notificar a las barras de herramientas sobre el cambio\r\n            // para mantener la sincronización\r\n            checkActiveFormats();\r\n          }\r\n          break;\r\n        default:\r\n          // For basic formatting (bold, italic, underline)\r\n          document.execCommand(command, false, value);\r\n      }\r\n      \r\n      // Update content and check for active formats\r\n      handleContentChange();\r\n      checkActiveFormats();\r\n    } catch (e) {\r\n      console.error(`Error applying format ${command}:`, e);\r\n    }\r\n  };\r\n\r\n  // Special handling for heading formats\r\n  const applyHeadingFormat = (headingType) => {\r\n    const selection = window.getSelection();\r\n    if (!selection.rangeCount) return;\r\n    \r\n    // Get the current selection\r\n    const range = selection.getRangeAt(0);\r\n    const selectedElement = range.commonAncestorContainer;\r\n    \r\n    // Find the block element that contains the selection\r\n    let blockElement = selectedElement;\r\n    if (blockElement.nodeType === 3) { // Text node\r\n      blockElement = blockElement.parentNode;\r\n    }\r\n    \r\n    // Find the highest block-level element within the editor\r\n    while (blockElement !== null && \r\n           blockElement.parentNode !== editorRef.current && \r\n           blockElement !== editorRef.current) {\r\n      blockElement = blockElement.parentNode;\r\n    }\r\n    \r\n    // Save the selection content\r\n    const content = range.cloneContents();\r\n    \r\n    // Create the new heading element\r\n    const newHeading = document.createElement(headingType);\r\n    \r\n    // If we have an empty selection, preserve the block element's content\r\n    if (range.collapsed) {\r\n      newHeading.innerHTML = blockElement.innerHTML;\r\n    } else {\r\n      // Otherwise use the selected content\r\n      newHeading.appendChild(content);\r\n    }\r\n    \r\n    // Replace the block element with our new heading\r\n    if (blockElement !== editorRef.current) {\r\n      blockElement.parentNode.replaceChild(newHeading, blockElement);\r\n    } else {\r\n      // If the blockElement is the editor itself, just insert at selection\r\n      range.deleteContents();\r\n      range.insertNode(newHeading);\r\n    }\r\n  };\r\n\r\n  // Handle image insertion\r\n  const handleImageInsert = () => {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = 'image/*';\r\n    \r\n    input.onchange = (e) => {\r\n      const file = e.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n          document.execCommand('insertImage', false, event.target.result);\r\n          handleContentChange();\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    };\r\n    \r\n    input.click();\r\n  };\r\n\r\n  // Handle paste events\r\n  const handlePaste = (e) => {\r\n    // Check for images in clipboard\r\n    const items = e.clipboardData?.items;\r\n    \r\n    if (items) {\r\n      for (let i = 0; i < items.length; i++) {\r\n        if (items[i].type.indexOf('image') !== -1) {\r\n          e.preventDefault();\r\n          \r\n          // Get image from clipboard\r\n          const blob = items[i].getAsFile();\r\n          const reader = new FileReader();\r\n          \r\n          reader.onload = (event) => {\r\n            // Insert the image\r\n            document.execCommand('insertImage', false, event.target.result);\r\n            handleContentChange();\r\n          };\r\n          \r\n          reader.readAsDataURL(blob);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle key commands\r\n  const handleKeyDown = (e) => {\r\n    // Support for tab\r\n    if (e.key === 'Tab') {\r\n      e.preventDefault();\r\n      document.execCommand('insertHTML', false, '&nbsp;&nbsp;&nbsp;&nbsp;');\r\n      return;\r\n    }\r\n  };\r\n\r\n  // Handle drag and drop for images\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n      const file = e.dataTransfer.files[0];\r\n      \r\n      if (file.type.startsWith('image/')) {\r\n        const reader = new FileReader();\r\n        \r\n        reader.onload = (event) => {\r\n          document.execCommand('insertImage', false, event.target.result);\r\n          handleContentChange();\r\n        };\r\n        \r\n        reader.readAsDataURL(file);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Styles for the editor\r\n  const styles = {\r\n    container: {\r\n      position: 'relative',\r\n      width: '100%',\r\n      height: '100%',\r\n      backgroundColor: colors.white,\r\n      borderRadius: borderRadius.md\r\n    },\r\n    editor: {\r\n      width: '100%',\r\n      height: 'calc(100% - 40px)', // Account for toolbar height\r\n      padding: spacing.xl,\r\n      outline: 'none',\r\n      overflow: 'auto',\r\n      color: colors.textPrimary,\r\n      fontFamily: typography.fontFamily,\r\n      fontSize: typography.fontSize.md,\r\n      lineHeight: 1.6\r\n    },\r\n    placeholder: {\r\n      position: 'absolute',\r\n      top: '40px', // Below toolbar\r\n      left: spacing.xl,\r\n      padding: spacing.xl,\r\n      color: colors.gray300,\r\n      pointerEvents: 'none'\r\n    }\r\n  };\r\n\r\n  // Initialize content with default font size\r\n  useEffect(() => {\r\n    if (editorRef.current && !content) {\r\n      // Si el contenido está vacío, establecer el tamaño de fuente predeterminado\r\n      editorRef.current.style.fontSize = '12px';\r\n    }\r\n  }, [content]);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      {/* Barra de herramientas estática */}\r\n      <SimpleEditorToolbar \r\n        onFormatText={applyFormat}\r\n        activeFormats={activeFormats} \r\n      />\r\n      \r\n      {/* Barra de herramientas flotante (nueva) */}\r\n      <FloatingToolbar \r\n        onFormatText={applyFormat}\r\n        activeFormats={activeFormats}\r\n        editorRef={editorRef}\r\n      />\r\n      \r\n      {/* Placeholder text when editor is empty */}\r\n      {(!internalContent || internalContent === '<p><br></p>' || internalContent === '<br>') && (\r\n        <div style={styles.placeholder}>\r\n          Comienza a escribir...\r\n        </div>\r\n      )}\r\n      \r\n      {/* Editable content area */}\r\n      <div\r\n        ref={editorRef}\r\n        style={{...styles.editor, fontSize: '12px' }} // Establecer tamaño predeterminado\r\n        onInput={handleContentChange}\r\n        onBlur={handleContentChange}\r\n        onKeyDown={handleKeyDown}\r\n        onClick={checkActiveFormats}\r\n        onKeyUp={checkActiveFormats}\r\n        onMouseUp={checkActiveFormats}\r\n        onPaste={handlePaste}\r\n        onDrop={handleDrop}\r\n        onDragOver={(e) => e.preventDefault()}\r\n      >\r\n        {/* Initial content will be set from the content prop */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}