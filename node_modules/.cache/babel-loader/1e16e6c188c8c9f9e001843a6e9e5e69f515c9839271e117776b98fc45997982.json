{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damva\\\\EducStation\\\\src\\\\components\\\\admin\\\\SimpleEditor.jsx\",\n  _s = $RefreshSig$();\n// src/components/admin/SimpleEditor.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport { colors, spacing, typography, shadows, borderRadius } from '../../styles/theme';\nimport SimpleEditorToolbar from './SimpleEditorToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleEditor = ({\n  content,\n  onChange\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  const [internalContent, setInternalContent] = useState(content || '');\n  const [activeFormats, setActiveFormats] = useState({\n    bold: false,\n    italic: false,\n    underline: false,\n    h1: false,\n    h2: false,\n    h3: false,\n    unorderedList: false,\n    orderedList: false,\n    link: false\n  });\n\n  // Initialize the editor with content\n  useEffect(() => {\n    if (editorRef.current) {\n      // Make editable\n      editorRef.current.contentEditable = true;\n\n      // Set initial content\n      if (content && content !== internalContent) {\n        editorRef.current.innerHTML = content;\n        setInternalContent(content);\n      }\n\n      // Focus if empty\n      if (!content) {\n        setTimeout(() => {\n          editorRef.current.focus();\n        }, 100);\n      }\n\n      // Add event listener for selection change to check active formats\n      document.addEventListener('selectionchange', checkActiveFormats);\n      return () => {\n        document.removeEventListener('selectionchange', checkActiveFormats);\n      };\n    }\n  }, [content]);\n\n  // Track content changes and notify parent\n  const handleContentChange = () => {\n    if (editorRef.current) {\n      const newContent = editorRef.current.innerHTML;\n      setInternalContent(newContent);\n      onChange(newContent);\n    }\n  };\n\n  // Check which formats are currently active\n  const checkActiveFormats = () => {\n    if (!document.activeElement || document.activeElement !== editorRef.current) {\n      return;\n    }\n    try {\n      // Basic formatting commands\n      const formats = {\n        bold: document.queryCommandState('bold'),\n        italic: document.queryCommandState('italic'),\n        underline: document.queryCommandState('underline'),\n        unorderedList: document.queryCommandState('insertUnorderedList'),\n        orderedList: document.queryCommandState('insertOrderedList'),\n        link: document.queryCommandState('createLink')\n      };\n\n      // Check for headings\n      const selection = window.getSelection();\n      if (selection && selection.rangeCount > 0) {\n        const range = selection.getRangeAt(0);\n        let element = range.commonAncestorContainer;\n\n        // Navigate to element node if we're in a text node\n        if (element.nodeType === 3) {\n          element = element.parentNode;\n        }\n\n        // Check parent nodes for heading tags\n        let currentNode = element;\n        while (currentNode && currentNode !== editorRef.current) {\n          var _currentNode$tagName;\n          const tagName = (_currentNode$tagName = currentNode.tagName) === null || _currentNode$tagName === void 0 ? void 0 : _currentNode$tagName.toLowerCase();\n          if (tagName === 'h1') formats.h1 = true;\n          if (tagName === 'h2') formats.h2 = true;\n          if (tagName === 'h3') formats.h3 = true;\n          currentNode = currentNode.parentNode;\n        }\n      }\n      setActiveFormats(formats);\n    } catch (e) {\n      console.error('Error checking active formats:', e);\n    }\n  };\n\n  // Apply formatting commands\n  const applyFormat = (command, value = null) => {\n    if (!editorRef.current) return;\n\n    // Ensure the editor has focus\n    if (document.activeElement !== editorRef.current) {\n      editorRef.current.focus();\n    }\n    try {\n      // For some commands we need special handling\n      switch (command) {\n        case 'h1':\n        case 'h2':\n        case 'h3':\n          applyHeadingFormat(command);\n          break;\n        case 'textColor':\n          const color = prompt('Introduzca un color (ej. #0b4444, red, etc):', '#0b4444');\n          if (color) {\n            document.execCommand('foreColor', false, color);\n          }\n          break;\n        case 'link':\n          const url = prompt('Introduzca la URL del enlace:', 'https://');\n          if (url) {\n            document.execCommand('createLink', false, url);\n          }\n          break;\n        case 'image':\n          handleImageInsert();\n          break;\n        case 'unorderedList':\n          document.execCommand('insertUnorderedList', false, null);\n          break;\n        case 'orderedList':\n          document.execCommand('insertOrderedList', false, null);\n          break;\n        default:\n          // For basic formatting (bold, italic, underline)\n          document.execCommand(command, false, value);\n      }\n\n      // Update content and check for active formats\n      handleContentChange();\n      checkActiveFormats();\n    } catch (e) {\n      console.error(`Error applying format ${command}:`, e);\n    }\n  };\n\n  // Special handling for heading formats\n  const applyHeadingFormat = headingType => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    // Get the current selection\n    const range = selection.getRangeAt(0);\n    const selectedElement = range.commonAncestorContainer;\n\n    // Find the block element that contains the selection\n    let blockElement = selectedElement;\n    if (blockElement.nodeType === 3) {\n      // Text node\n      blockElement = blockElement.parentNode;\n    }\n\n    // Find the highest block-level element within the editor\n    while (blockElement !== null && blockElement.parentNode !== editorRef.current && blockElement !== editorRef.current) {\n      blockElement = blockElement.parentNode;\n    }\n\n    // Save the selection content\n    const content = range.cloneContents();\n\n    // Create the new heading element\n    const newHeading = document.createElement(headingType);\n\n    // If we have an empty selection, preserve the block element's content\n    if (range.collapsed) {\n      newHeading.innerHTML = blockElement.innerHTML;\n    } else {\n      // Otherwise use the selected content\n      newHeading.appendChild(content);\n    }\n\n    // Replace the block element with our new heading\n    if (blockElement !== editorRef.current) {\n      blockElement.parentNode.replaceChild(newHeading, blockElement);\n    } else {\n      // If the blockElement is the editor itself, just insert at selection\n      range.deleteContents();\n      range.insertNode(newHeading);\n    }\n  };\n\n  // Handle image insertion\n  const handleImageInsert = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.onchange = e => {\n      const file = e.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          document.execCommand('insertImage', false, event.target.result);\n          handleContentChange();\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    input.click();\n  };\n\n  // Handle paste events\n  const handlePaste = e => {\n    var _e$clipboardData;\n    // Check for images in clipboard\n    const items = (_e$clipboardData = e.clipboardData) === null || _e$clipboardData === void 0 ? void 0 : _e$clipboardData.items;\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].type.indexOf('image') !== -1) {\n          e.preventDefault();\n\n          // Get image from clipboard\n          const blob = items[i].getAsFile();\n          const reader = new FileReader();\n          reader.onload = event => {\n            // Insert the image\n            document.execCommand('insertImage', false, event.target.result);\n            handleContentChange();\n          };\n          reader.readAsDataURL(blob);\n          return;\n        }\n      }\n    }\n  };\n\n  // Handle key commands\n  const handleKeyDown = e => {\n    // Support for tab\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      document.execCommand('insertHTML', false, '&nbsp;&nbsp;&nbsp;&nbsp;');\n      return;\n    }\n  };\n\n  // Handle drag and drop for images\n  const handleDrop = e => {\n    e.preventDefault();\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          document.execCommand('insertImage', false, event.target.result);\n          handleContentChange();\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  };\n\n  // Styles for the editor\n  const styles = {\n    container: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      backgroundColor: colors.white,\n      borderRadius: borderRadius.md\n    },\n    editor: {\n      width: '100%',\n      height: 'calc(100% - 40px)',\n      // Account for toolbar height\n      padding: spacing.xl,\n      outline: 'none',\n      overflow: 'auto',\n      color: colors.textPrimary,\n      fontFamily: typography.fontFamily,\n      fontSize: typography.fontSize.md,\n      lineHeight: 1.6\n    },\n    placeholder: {\n      position: 'absolute',\n      top: '40px',\n      // Below toolbar\n      left: spacing.xl,\n      padding: spacing.xl,\n      color: colors.gray300,\n      pointerEvents: 'none'\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(SimpleEditorToolbar, {\n      onFormatText: applyFormat,\n      activeFormats: activeFormats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), (!internalContent || internalContent === '<p><br></p>' || internalContent === '<br>') && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.placeholder,\n      children: \"Comienza a escribir...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: editorRef,\n      style: styles.editor,\n      onInput: handleContentChange,\n      onBlur: handleContentChange,\n      onKeyDown: handleKeyDown,\n      onClick: checkActiveFormats,\n      onKeyUp: checkActiveFormats,\n      onMouseUp: checkActiveFormats,\n      onPaste: handlePaste,\n      onDrop: handleDrop,\n      onDragOver: e => e.preventDefault()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleEditor, \"eoVKlvQmrLNR8jXh8GbjMcYZgKQ=\");\n_c = SimpleEditor;\nexport default SimpleEditor;\nvar _c;\n$RefreshReg$(_c, \"SimpleEditor\");","map":{"version":3,"names":["React","useState","useRef","useEffect","colors","spacing","typography","shadows","borderRadius","SimpleEditorToolbar","jsxDEV","_jsxDEV","SimpleEditor","content","onChange","_s","editorRef","internalContent","setInternalContent","activeFormats","setActiveFormats","bold","italic","underline","h1","h2","h3","unorderedList","orderedList","link","current","contentEditable","innerHTML","setTimeout","focus","document","addEventListener","checkActiveFormats","removeEventListener","handleContentChange","newContent","activeElement","formats","queryCommandState","selection","window","getSelection","rangeCount","range","getRangeAt","element","commonAncestorContainer","nodeType","parentNode","currentNode","_currentNode$tagName","tagName","toLowerCase","e","console","error","applyFormat","command","value","applyHeadingFormat","color","prompt","execCommand","url","handleImageInsert","headingType","selectedElement","blockElement","cloneContents","newHeading","createElement","collapsed","appendChild","replaceChild","deleteContents","insertNode","input","type","accept","onchange","file","target","files","reader","FileReader","onload","event","result","readAsDataURL","click","handlePaste","_e$clipboardData","items","clipboardData","i","length","indexOf","preventDefault","blob","getAsFile","handleKeyDown","key","handleDrop","dataTransfer","startsWith","styles","container","position","width","height","backgroundColor","white","md","editor","padding","xl","outline","overflow","textPrimary","fontFamily","fontSize","lineHeight","placeholder","top","left","gray300","pointerEvents","style","children","onFormatText","fileName","_jsxFileName","lineNumber","columnNumber","ref","onInput","onBlur","onKeyDown","onClick","onKeyUp","onMouseUp","onPaste","onDrop","onDragOver","_c","$RefreshReg$"],"sources":["C:/Users/damva/EducStation/src/components/admin/SimpleEditor.jsx"],"sourcesContent":["// src/components/admin/SimpleEditor.jsx\nimport React, { useState, useRef, useEffect } from 'react';\nimport { colors, spacing, typography, shadows, borderRadius } from '../../styles/theme';\nimport SimpleEditorToolbar from './SimpleEditorToolbar';\n\nconst SimpleEditor = ({ content, onChange }) => {\n  const editorRef = useRef(null);\n  const [internalContent, setInternalContent] = useState(content || '');\n  const [activeFormats, setActiveFormats] = useState({\n    bold: false,\n    italic: false,\n    underline: false,\n    h1: false,\n    h2: false,\n    h3: false,\n    unorderedList: false,\n    orderedList: false,\n    link: false,\n  });\n\n  // Initialize the editor with content\n  useEffect(() => {\n    if (editorRef.current) {\n      // Make editable\n      editorRef.current.contentEditable = true;\n      \n      // Set initial content\n      if (content && content !== internalContent) {\n        editorRef.current.innerHTML = content;\n        setInternalContent(content);\n      }\n      \n      // Focus if empty\n      if (!content) {\n        setTimeout(() => {\n          editorRef.current.focus();\n        }, 100);\n      }\n      \n      // Add event listener for selection change to check active formats\n      document.addEventListener('selectionchange', checkActiveFormats);\n      \n      return () => {\n        document.removeEventListener('selectionchange', checkActiveFormats);\n      };\n    }\n  }, [content]);\n\n  // Track content changes and notify parent\n  const handleContentChange = () => {\n    if (editorRef.current) {\n      const newContent = editorRef.current.innerHTML;\n      setInternalContent(newContent);\n      onChange(newContent);\n    }\n  };\n\n  // Check which formats are currently active\n  const checkActiveFormats = () => {\n    if (!document.activeElement || document.activeElement !== editorRef.current) {\n      return;\n    }\n    \n    try {\n      // Basic formatting commands\n      const formats = {\n        bold: document.queryCommandState('bold'),\n        italic: document.queryCommandState('italic'),\n        underline: document.queryCommandState('underline'),\n        unorderedList: document.queryCommandState('insertUnorderedList'),\n        orderedList: document.queryCommandState('insertOrderedList'),\n        link: document.queryCommandState('createLink')\n      };\n      \n      // Check for headings\n      const selection = window.getSelection();\n      if (selection && selection.rangeCount > 0) {\n        const range = selection.getRangeAt(0);\n        let element = range.commonAncestorContainer;\n        \n        // Navigate to element node if we're in a text node\n        if (element.nodeType === 3) {\n          element = element.parentNode;\n        }\n        \n        // Check parent nodes for heading tags\n        let currentNode = element;\n        while (currentNode && currentNode !== editorRef.current) {\n          const tagName = currentNode.tagName?.toLowerCase();\n          if (tagName === 'h1') formats.h1 = true;\n          if (tagName === 'h2') formats.h2 = true;\n          if (tagName === 'h3') formats.h3 = true;\n          \n          currentNode = currentNode.parentNode;\n        }\n      }\n      \n      setActiveFormats(formats);\n    } catch (e) {\n      console.error('Error checking active formats:', e);\n    }\n  };\n\n  // Apply formatting commands\n  const applyFormat = (command, value = null) => {\n    if (!editorRef.current) return;\n    \n    // Ensure the editor has focus\n    if (document.activeElement !== editorRef.current) {\n      editorRef.current.focus();\n    }\n    \n    try {\n      // For some commands we need special handling\n      switch (command) {\n        case 'h1':\n        case 'h2':\n        case 'h3':\n          applyHeadingFormat(command);\n          break;\n        case 'textColor':\n          const color = prompt('Introduzca un color (ej. #0b4444, red, etc):', '#0b4444');\n          if (color) {\n            document.execCommand('foreColor', false, color);\n          }\n          break;\n        case 'link':\n          const url = prompt('Introduzca la URL del enlace:', 'https://');\n          if (url) {\n            document.execCommand('createLink', false, url);\n          }\n          break;\n        case 'image':\n          handleImageInsert();\n          break;\n        case 'unorderedList':\n          document.execCommand('insertUnorderedList', false, null);\n          break;\n        case 'orderedList':\n          document.execCommand('insertOrderedList', false, null);\n          break;\n        default:\n          // For basic formatting (bold, italic, underline)\n          document.execCommand(command, false, value);\n      }\n      \n      // Update content and check for active formats\n      handleContentChange();\n      checkActiveFormats();\n    } catch (e) {\n      console.error(`Error applying format ${command}:`, e);\n    }\n  };\n\n  // Special handling for heading formats\n  const applyHeadingFormat = (headingType) => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n    \n    // Get the current selection\n    const range = selection.getRangeAt(0);\n    const selectedElement = range.commonAncestorContainer;\n    \n    // Find the block element that contains the selection\n    let blockElement = selectedElement;\n    if (blockElement.nodeType === 3) { // Text node\n      blockElement = blockElement.parentNode;\n    }\n    \n    // Find the highest block-level element within the editor\n    while (blockElement !== null && \n           blockElement.parentNode !== editorRef.current && \n           blockElement !== editorRef.current) {\n      blockElement = blockElement.parentNode;\n    }\n    \n    // Save the selection content\n    const content = range.cloneContents();\n    \n    // Create the new heading element\n    const newHeading = document.createElement(headingType);\n    \n    // If we have an empty selection, preserve the block element's content\n    if (range.collapsed) {\n      newHeading.innerHTML = blockElement.innerHTML;\n    } else {\n      // Otherwise use the selected content\n      newHeading.appendChild(content);\n    }\n    \n    // Replace the block element with our new heading\n    if (blockElement !== editorRef.current) {\n      blockElement.parentNode.replaceChild(newHeading, blockElement);\n    } else {\n      // If the blockElement is the editor itself, just insert at selection\n      range.deleteContents();\n      range.insertNode(newHeading);\n    }\n  };\n\n  // Handle image insertion\n  const handleImageInsert = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    \n    input.onchange = (e) => {\n      const file = e.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (event) => {\n          document.execCommand('insertImage', false, event.target.result);\n          handleContentChange();\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    \n    input.click();\n  };\n\n  // Handle paste events\n  const handlePaste = (e) => {\n    // Check for images in clipboard\n    const items = e.clipboardData?.items;\n    \n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].type.indexOf('image') !== -1) {\n          e.preventDefault();\n          \n          // Get image from clipboard\n          const blob = items[i].getAsFile();\n          const reader = new FileReader();\n          \n          reader.onload = (event) => {\n            // Insert the image\n            document.execCommand('insertImage', false, event.target.result);\n            handleContentChange();\n          };\n          \n          reader.readAsDataURL(blob);\n          return;\n        }\n      }\n    }\n  };\n\n  // Handle key commands\n  const handleKeyDown = (e) => {\n    // Support for tab\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      document.execCommand('insertHTML', false, '&nbsp;&nbsp;&nbsp;&nbsp;');\n      return;\n    }\n  };\n\n  // Handle drag and drop for images\n  const handleDrop = (e) => {\n    e.preventDefault();\n    \n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n      \n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        \n        reader.onload = (event) => {\n          document.execCommand('insertImage', false, event.target.result);\n          handleContentChange();\n        };\n        \n        reader.readAsDataURL(file);\n      }\n    }\n  };\n\n  // Styles for the editor\n  const styles = {\n    container: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      backgroundColor: colors.white,\n      borderRadius: borderRadius.md\n    },\n    editor: {\n      width: '100%',\n      height: 'calc(100% - 40px)', // Account for toolbar height\n      padding: spacing.xl,\n      outline: 'none',\n      overflow: 'auto',\n      color: colors.textPrimary,\n      fontFamily: typography.fontFamily,\n      fontSize: typography.fontSize.md,\n      lineHeight: 1.6\n    },\n    placeholder: {\n      position: 'absolute',\n      top: '40px', // Below toolbar\n      left: spacing.xl,\n      padding: spacing.xl,\n      color: colors.gray300,\n      pointerEvents: 'none'\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      {/* Toolbar */}\n      <SimpleEditorToolbar \n        onFormatText={applyFormat}\n        activeFormats={activeFormats} \n      />\n      \n      {/* Placeholder text when editor is empty */}\n      {(!internalContent || internalContent === '<p><br></p>' || internalContent === '<br>') && (\n        <div style={styles.placeholder}>\n          Comienza a escribir...\n        </div>\n      )}\n      \n      {/* Editable content area */}\n      <div\n        ref={editorRef}\n        style={styles.editor}\n        onInput={handleContentChange}\n        onBlur={handleContentChange}\n        onKeyDown={handleKeyDown}\n        onClick={checkActiveFormats}\n        onKeyUp={checkActiveFormats}\n        onMouseUp={checkActiveFormats}\n        onPaste={handlePaste}\n        onDrop={handleDrop}\n        onDragOver={(e) => e.preventDefault()}\n      >\n        {/* Initial content will be set from the content prop */}\n      </div>\n    </div>\n  );\n};\n\nexport default SimpleEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}