{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\damva\\\\EducStation\\\\src\\\\components\\\\admin\\\\SimpleEditor.jsx\",\n  _s = $RefreshSig$();\n// src/components/admin/SimpleEditor.jsx\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { colors, spacing, typography, shadows, borderRadius, transitions } from '../../styles/theme';\nimport FloatingToolbar from './FloatingToolbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleEditor = ({\n  content,\n  onChange\n}) => {\n  _s();\n  const editorRef = useRef(null);\n  const [internalContent, setInternalContent] = useState(content || '');\n  // Estado compartido para el tamaño de fuente - importante para sincronización\n  const [currentFontSize, setCurrentFontSize] = useState(12); // Valor predeterminado\n\n  const [activeFormats, setActiveFormats] = useState({\n    bold: false,\n    italic: false,\n    underline: false,\n    h1: false,\n    h2: false,\n    h3: false,\n    unorderedList: false,\n    orderedList: false,\n    link: false\n  });\n\n  // Initialize the editor with content\n  useEffect(() => {\n    if (editorRef.current) {\n      // Make editable\n      editorRef.current.contentEditable = true;\n\n      // Set initial content\n      if (content && content !== internalContent) {\n        editorRef.current.innerHTML = content;\n        setInternalContent(content);\n      }\n\n      // Focus if empty\n      if (!content) {\n        setTimeout(() => {\n          editorRef.current.focus();\n        }, 100);\n      }\n\n      // Add event listener for selection change to check active formats\n      document.addEventListener('selectionchange', checkActiveFormats);\n      return () => {\n        document.removeEventListener('selectionchange', checkActiveFormats);\n      };\n    }\n  }, [content]);\n\n  // Track content changes and notify parent\n  const handleContentChange = () => {\n    if (editorRef.current) {\n      const newContent = editorRef.current.innerHTML;\n      setInternalContent(newContent);\n      onChange(newContent);\n    }\n  };\n\n  // Check which formats are currently active\n  const checkActiveFormats = () => {\n    if (!document.activeElement || document.activeElement !== editorRef.current) {\n      return;\n    }\n    try {\n      // Basic formatting commands\n      const formats = {\n        bold: document.queryCommandState('bold'),\n        italic: document.queryCommandState('italic'),\n        underline: document.queryCommandState('underline'),\n        unorderedList: document.queryCommandState('insertUnorderedList'),\n        orderedList: document.queryCommandState('insertOrderedList'),\n        link: document.queryCommandState('createLink')\n      };\n\n      // Check for headings\n      const selection = window.getSelection();\n      if (selection && selection.rangeCount > 0) {\n        const range = selection.getRangeAt(0);\n        let element = range.commonAncestorContainer;\n\n        // Navigate to element node if we're in a text node\n        if (element.nodeType === 3) {\n          element = element.parentNode;\n        }\n\n        // Check parent nodes for heading tags\n        let currentNode = element;\n        while (currentNode && currentNode !== editorRef.current) {\n          var _currentNode$tagName;\n          const tagName = (_currentNode$tagName = currentNode.tagName) === null || _currentNode$tagName === void 0 ? void 0 : _currentNode$tagName.toLowerCase();\n          if (tagName === 'h1') formats.h1 = true;\n          if (tagName === 'h2') formats.h2 = true;\n          if (tagName === 'h3') formats.h3 = true;\n          currentNode = currentNode.parentNode;\n        }\n\n        // Obtener el tamaño de fuente actual\n        const computedStyle = window.getComputedStyle(element);\n        const fontSize = parseInt(computedStyle.fontSize);\n        if (fontSize && !isNaN(fontSize)) {\n          setCurrentFontSize(fontSize);\n        }\n      }\n      setActiveFormats(formats);\n    } catch (e) {\n      console.error('Error checking active formats:', e);\n    }\n  };\n\n  // Apply formatting commands\n  const applyFormat = (command, value = null) => {\n    if (!editorRef.current) return;\n\n    // Ensure the editor has focus\n    if (document.activeElement !== editorRef.current) {\n      editorRef.current.focus();\n    }\n    try {\n      // For some commands we need special handling\n      switch (command) {\n        case 'h1':\n        case 'h2':\n        case 'h3':\n          applyHeadingFormat(command);\n          break;\n        case 'textColor':\n          // Ya no necesitamos usar el prompt porque ahora tenemos un color picker\n          if (value) {\n            document.execCommand('foreColor', false, value);\n          }\n          break;\n        case 'link':\n          const url = prompt('Introduzca la URL del enlace:', 'https://');\n          if (url) {\n            document.execCommand('createLink', false, url);\n          }\n          break;\n        case 'image':\n          handleImageInsert();\n          break;\n        case 'unorderedList':\n          document.execCommand('insertUnorderedList', false, null);\n          break;\n        case 'orderedList':\n          document.execCommand('insertOrderedList', false, null);\n          break;\n        case 'fontSize':\n          // Aplicar el tamaño de fuente usando el elemento span\n          if (value) {\n            // Actualizar el estado compartido con el nuevo tamaño\n            const size = parseFloat(value);\n            setCurrentFontSize(size);\n\n            // Crear un span con el estilo de tamaño de fuente\n            document.execCommand('fontSize', false, '7'); // Usamos 7 como valor temporal\n\n            // Después modificamos los elementos con fontSize=7 para usar el valor real\n            const selection = window.getSelection();\n            if (selection.rangeCount > 0) {\n              const fontElements = document.querySelectorAll('font[size=\"7\"]');\n              fontElements.forEach(element => {\n                element.removeAttribute('size');\n                element.style.fontSize = value;\n              });\n            }\n\n            // Notificar a las barras de herramientas sobre el cambio\n            // para mantener la sincronización\n            checkActiveFormats();\n          }\n          break;\n        default:\n          // For basic formatting (bold, italic, underline)\n          document.execCommand(command, false, value);\n      }\n\n      // Update content and check for active formats\n      handleContentChange();\n      checkActiveFormats();\n    } catch (e) {\n      console.error(`Error applying format ${command}:`, e);\n    }\n  };\n\n  // Special handling for heading formats\n  const applyHeadingFormat = headingType => {\n    const selection = window.getSelection();\n    if (!selection.rangeCount) return;\n\n    // Get the current selection\n    const range = selection.getRangeAt(0);\n    const selectedElement = range.commonAncestorContainer;\n\n    // Find the block element that contains the selection\n    let blockElement = selectedElement;\n    if (blockElement.nodeType === 3) {\n      // Text node\n      blockElement = blockElement.parentNode;\n    }\n\n    // Find the highest block-level element within the editor\n    while (blockElement !== null && blockElement.parentNode !== editorRef.current && blockElement !== editorRef.current) {\n      blockElement = blockElement.parentNode;\n    }\n\n    // Save the selection content\n    const content = range.cloneContents();\n\n    // Create the new heading element\n    const newHeading = document.createElement(headingType);\n\n    // If we have an empty selection, preserve the block element's content\n    if (range.collapsed) {\n      newHeading.innerHTML = blockElement.innerHTML;\n    } else {\n      // Otherwise use the selected content\n      newHeading.appendChild(content);\n    }\n\n    // Replace the block element with our new heading\n    if (blockElement !== editorRef.current) {\n      blockElement.parentNode.replaceChild(newHeading, blockElement);\n    } else {\n      // If the blockElement is the editor itself, just insert at selection\n      range.deleteContents();\n      range.insertNode(newHeading);\n    }\n  };\n\n  // Handle image insertion\n  const handleImageInsert = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.onchange = e => {\n      const file = e.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          document.execCommand('insertImage', false, event.target.result);\n          handleContentChange();\n        };\n        reader.readAsDataURL(file);\n      }\n    };\n    input.click();\n  };\n\n  // Handle paste events\n  const handlePaste = e => {\n    var _e$clipboardData;\n    // Check for images in clipboard\n    const items = (_e$clipboardData = e.clipboardData) === null || _e$clipboardData === void 0 ? void 0 : _e$clipboardData.items;\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        if (items[i].type.indexOf('image') !== -1) {\n          e.preventDefault();\n\n          // Get image from clipboard\n          const blob = items[i].getAsFile();\n          const reader = new FileReader();\n          reader.onload = event => {\n            // Insert the image\n            document.execCommand('insertImage', false, event.target.result);\n            handleContentChange();\n          };\n          reader.readAsDataURL(blob);\n          return;\n        }\n      }\n    }\n  };\n\n  // Handle key commands\n  const handleKeyDown = e => {\n    // Support for tab\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      document.execCommand('insertHTML', false, '&nbsp;&nbsp;&nbsp;&nbsp;');\n      return;\n    }\n  };\n\n  // Handle drag and drop for images\n  const handleDrop = e => {\n    e.preventDefault();\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      const file = e.dataTransfer.files[0];\n      if (file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = event => {\n          document.execCommand('insertImage', false, event.target.result);\n          handleContentChange();\n        };\n        reader.readAsDataURL(file);\n      }\n    }\n  };\n\n  // Mostrar la barra flotante al hacer clic en el editor\n  const handleEditorClick = () => {\n    var _editorRef$current;\n    // Este evento será capturado por FloatingToolbar \n    // pero añadimos la función aquí para dar feedback visual si es necesario\n    (_editorRef$current = editorRef.current) === null || _editorRef$current === void 0 ? void 0 : _editorRef$current.focus();\n  };\n\n  // Estilos para el editor\n  const styles = {\n    container: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      backgroundColor: colors.white,\n      borderRadius: borderRadius.md\n    },\n    editor: {\n      width: '100%',\n      height: '100%',\n      // Aprovechamos toda la altura disponible al eliminar la barra estática\n      padding: spacing.xl,\n      outline: 'none',\n      overflow: 'auto',\n      color: colors.textPrimary,\n      fontFamily: typography.fontFamily,\n      fontSize: typography.fontSize.md,\n      lineHeight: 1.6,\n      transition: 'box-shadow 0.2s ease',\n      cursor: 'text',\n      minHeight: '600px' // Garantizamos una altura mínima adecuada\n    },\n    placeholder: {\n      position: 'absolute',\n      top: spacing.xl,\n      left: spacing.xl,\n      color: colors.gray300,\n      pointerEvents: 'none'\n    }\n  };\n\n  // Initialize content with default font size\n  useEffect(() => {\n    if (editorRef.current && !content) {\n      // Si el contenido está vacío, establecer el tamaño de fuente predeterminado\n      editorRef.current.style.fontSize = '12px';\n    }\n  }, [content]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(FloatingToolbar, {\n      onFormatText: applyFormat,\n      activeFormats: activeFormats,\n      editorRef: editorRef,\n      fontSize: currentFontSize,\n      setFontSize: size => applyFormat('fontSize', `${size}px`)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this), (!internalContent || internalContent === '<p><br></p>' || internalContent === '<br>') && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.placeholder,\n      children: \"Comienza a escribir...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: editorRef,\n      style: {\n        ...styles.editor,\n        fontSize: '12px'\n      },\n      onInput: handleContentChange,\n      onBlur: handleContentChange,\n      onKeyDown: handleKeyDown,\n      onClick: e => {\n        handleEditorClick();\n        checkActiveFormats();\n      },\n      onKeyUp: checkActiveFormats,\n      onMouseUp: checkActiveFormats,\n      onPaste: handlePaste,\n      onDrop: handleDrop,\n      onDragOver: e => e.preventDefault()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleEditor, \"KZnoEaPNAKbsbKPGifc9i+EqnIc=\");\n_c = SimpleEditor;\nexport default SimpleEditor;\nvar _c;\n$RefreshReg$(_c, \"SimpleEditor\");","map":{"version":3,"names":["React","useState","useRef","useEffect","colors","spacing","typography","shadows","borderRadius","transitions","FloatingToolbar","jsxDEV","_jsxDEV","SimpleEditor","content","onChange","_s","editorRef","internalContent","setInternalContent","currentFontSize","setCurrentFontSize","activeFormats","setActiveFormats","bold","italic","underline","h1","h2","h3","unorderedList","orderedList","link","current","contentEditable","innerHTML","setTimeout","focus","document","addEventListener","checkActiveFormats","removeEventListener","handleContentChange","newContent","activeElement","formats","queryCommandState","selection","window","getSelection","rangeCount","range","getRangeAt","element","commonAncestorContainer","nodeType","parentNode","currentNode","_currentNode$tagName","tagName","toLowerCase","computedStyle","getComputedStyle","fontSize","parseInt","isNaN","e","console","error","applyFormat","command","value","applyHeadingFormat","execCommand","url","prompt","handleImageInsert","size","parseFloat","fontElements","querySelectorAll","forEach","removeAttribute","style","headingType","selectedElement","blockElement","cloneContents","newHeading","createElement","collapsed","appendChild","replaceChild","deleteContents","insertNode","input","type","accept","onchange","file","target","files","reader","FileReader","onload","event","result","readAsDataURL","click","handlePaste","_e$clipboardData","items","clipboardData","i","length","indexOf","preventDefault","blob","getAsFile","handleKeyDown","key","handleDrop","dataTransfer","startsWith","handleEditorClick","_editorRef$current","styles","container","position","width","height","backgroundColor","white","md","editor","padding","xl","outline","overflow","color","textPrimary","fontFamily","lineHeight","transition","cursor","minHeight","placeholder","top","left","gray300","pointerEvents","children","onFormatText","setFontSize","fileName","_jsxFileName","lineNumber","columnNumber","ref","onInput","onBlur","onKeyDown","onClick","onKeyUp","onMouseUp","onPaste","onDrop","onDragOver","_c","$RefreshReg$"],"sources":["C:/Users/damva/EducStation/src/components/admin/SimpleEditor.jsx"],"sourcesContent":["// src/components/admin/SimpleEditor.jsx\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { colors, spacing, typography, shadows, borderRadius, transitions } from '../../styles/theme';\r\nimport FloatingToolbar from './FloatingToolbar';\r\n\r\nconst SimpleEditor = ({ content, onChange }) => {\r\n  const editorRef = useRef(null);\r\n  const [internalContent, setInternalContent] = useState(content || '');\r\n  // Estado compartido para el tamaño de fuente - importante para sincronización\r\n  const [currentFontSize, setCurrentFontSize] = useState(12); // Valor predeterminado\r\n  \r\n  const [activeFormats, setActiveFormats] = useState({\r\n    bold: false,\r\n    italic: false,\r\n    underline: false,\r\n    h1: false,\r\n    h2: false,\r\n    h3: false,\r\n    unorderedList: false,\r\n    orderedList: false,\r\n    link: false,\r\n  });\r\n\r\n  // Initialize the editor with content\r\n  useEffect(() => {\r\n    if (editorRef.current) {\r\n      // Make editable\r\n      editorRef.current.contentEditable = true;\r\n      \r\n      // Set initial content\r\n      if (content && content !== internalContent) {\r\n        editorRef.current.innerHTML = content;\r\n        setInternalContent(content);\r\n      }\r\n      \r\n      // Focus if empty\r\n      if (!content) {\r\n        setTimeout(() => {\r\n          editorRef.current.focus();\r\n        }, 100);\r\n      }\r\n      \r\n      // Add event listener for selection change to check active formats\r\n      document.addEventListener('selectionchange', checkActiveFormats);\r\n      \r\n      return () => {\r\n        document.removeEventListener('selectionchange', checkActiveFormats);\r\n      };\r\n    }\r\n  }, [content]);\r\n\r\n  // Track content changes and notify parent\r\n  const handleContentChange = () => {\r\n    if (editorRef.current) {\r\n      const newContent = editorRef.current.innerHTML;\r\n      setInternalContent(newContent);\r\n      onChange(newContent);\r\n    }\r\n  };\r\n\r\n  // Check which formats are currently active\r\n  const checkActiveFormats = () => {\r\n    if (!document.activeElement || document.activeElement !== editorRef.current) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Basic formatting commands\r\n      const formats = {\r\n        bold: document.queryCommandState('bold'),\r\n        italic: document.queryCommandState('italic'),\r\n        underline: document.queryCommandState('underline'),\r\n        unorderedList: document.queryCommandState('insertUnorderedList'),\r\n        orderedList: document.queryCommandState('insertOrderedList'),\r\n        link: document.queryCommandState('createLink')\r\n      };\r\n      \r\n      // Check for headings\r\n      const selection = window.getSelection();\r\n      if (selection && selection.rangeCount > 0) {\r\n        const range = selection.getRangeAt(0);\r\n        let element = range.commonAncestorContainer;\r\n        \r\n        // Navigate to element node if we're in a text node\r\n        if (element.nodeType === 3) {\r\n          element = element.parentNode;\r\n        }\r\n        \r\n        // Check parent nodes for heading tags\r\n        let currentNode = element;\r\n        while (currentNode && currentNode !== editorRef.current) {\r\n          const tagName = currentNode.tagName?.toLowerCase();\r\n          if (tagName === 'h1') formats.h1 = true;\r\n          if (tagName === 'h2') formats.h2 = true;\r\n          if (tagName === 'h3') formats.h3 = true;\r\n          \r\n          currentNode = currentNode.parentNode;\r\n        }\r\n        \r\n        // Obtener el tamaño de fuente actual\r\n        const computedStyle = window.getComputedStyle(element);\r\n        const fontSize = parseInt(computedStyle.fontSize);\r\n        if (fontSize && !isNaN(fontSize)) {\r\n          setCurrentFontSize(fontSize);\r\n        }\r\n      }\r\n      \r\n      setActiveFormats(formats);\r\n    } catch (e) {\r\n      console.error('Error checking active formats:', e);\r\n    }\r\n  };\r\n\r\n  // Apply formatting commands\r\n  const applyFormat = (command, value = null) => {\r\n    if (!editorRef.current) return;\r\n    \r\n    // Ensure the editor has focus\r\n    if (document.activeElement !== editorRef.current) {\r\n      editorRef.current.focus();\r\n    }\r\n    \r\n    try {\r\n      // For some commands we need special handling\r\n      switch (command) {\r\n        case 'h1':\r\n        case 'h2':\r\n        case 'h3':\r\n          applyHeadingFormat(command);\r\n          break;\r\n        case 'textColor':\r\n          // Ya no necesitamos usar el prompt porque ahora tenemos un color picker\r\n          if (value) {\r\n            document.execCommand('foreColor', false, value);\r\n          }\r\n          break;\r\n        case 'link':\r\n          const url = prompt('Introduzca la URL del enlace:', 'https://');\r\n          if (url) {\r\n            document.execCommand('createLink', false, url);\r\n          }\r\n          break;\r\n        case 'image':\r\n          handleImageInsert();\r\n          break;\r\n        case 'unorderedList':\r\n          document.execCommand('insertUnorderedList', false, null);\r\n          break;\r\n        case 'orderedList':\r\n          document.execCommand('insertOrderedList', false, null);\r\n          break;\r\n        case 'fontSize':\r\n          // Aplicar el tamaño de fuente usando el elemento span\r\n          if (value) {\r\n            // Actualizar el estado compartido con el nuevo tamaño\r\n            const size = parseFloat(value);\r\n            setCurrentFontSize(size);\r\n            \r\n            // Crear un span con el estilo de tamaño de fuente\r\n            document.execCommand('fontSize', false, '7'); // Usamos 7 como valor temporal\r\n            \r\n            // Después modificamos los elementos con fontSize=7 para usar el valor real\r\n            const selection = window.getSelection();\r\n            if (selection.rangeCount > 0) {\r\n              const fontElements = document.querySelectorAll('font[size=\"7\"]');\r\n              \r\n              fontElements.forEach(element => {\r\n                element.removeAttribute('size');\r\n                element.style.fontSize = value;\r\n              });\r\n            }\r\n            \r\n            // Notificar a las barras de herramientas sobre el cambio\r\n            // para mantener la sincronización\r\n            checkActiveFormats();\r\n          }\r\n          break;\r\n        default:\r\n          // For basic formatting (bold, italic, underline)\r\n          document.execCommand(command, false, value);\r\n      }\r\n      \r\n      // Update content and check for active formats\r\n      handleContentChange();\r\n      checkActiveFormats();\r\n    } catch (e) {\r\n      console.error(`Error applying format ${command}:`, e);\r\n    }\r\n  };\r\n\r\n  // Special handling for heading formats\r\n  const applyHeadingFormat = (headingType) => {\r\n    const selection = window.getSelection();\r\n    if (!selection.rangeCount) return;\r\n    \r\n    // Get the current selection\r\n    const range = selection.getRangeAt(0);\r\n    const selectedElement = range.commonAncestorContainer;\r\n    \r\n    // Find the block element that contains the selection\r\n    let blockElement = selectedElement;\r\n    if (blockElement.nodeType === 3) { // Text node\r\n      blockElement = blockElement.parentNode;\r\n    }\r\n    \r\n    // Find the highest block-level element within the editor\r\n    while (blockElement !== null && \r\n           blockElement.parentNode !== editorRef.current && \r\n           blockElement !== editorRef.current) {\r\n      blockElement = blockElement.parentNode;\r\n    }\r\n    \r\n    // Save the selection content\r\n    const content = range.cloneContents();\r\n    \r\n    // Create the new heading element\r\n    const newHeading = document.createElement(headingType);\r\n    \r\n    // If we have an empty selection, preserve the block element's content\r\n    if (range.collapsed) {\r\n      newHeading.innerHTML = blockElement.innerHTML;\r\n    } else {\r\n      // Otherwise use the selected content\r\n      newHeading.appendChild(content);\r\n    }\r\n    \r\n    // Replace the block element with our new heading\r\n    if (blockElement !== editorRef.current) {\r\n      blockElement.parentNode.replaceChild(newHeading, blockElement);\r\n    } else {\r\n      // If the blockElement is the editor itself, just insert at selection\r\n      range.deleteContents();\r\n      range.insertNode(newHeading);\r\n    }\r\n  };\r\n\r\n  // Handle image insertion\r\n  const handleImageInsert = () => {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = 'image/*';\r\n    \r\n    input.onchange = (e) => {\r\n      const file = e.target.files[0];\r\n      if (file) {\r\n        const reader = new FileReader();\r\n        reader.onload = (event) => {\r\n          document.execCommand('insertImage', false, event.target.result);\r\n          handleContentChange();\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n    };\r\n    \r\n    input.click();\r\n  };\r\n\r\n  // Handle paste events\r\n  const handlePaste = (e) => {\r\n    // Check for images in clipboard\r\n    const items = e.clipboardData?.items;\r\n    \r\n    if (items) {\r\n      for (let i = 0; i < items.length; i++) {\r\n        if (items[i].type.indexOf('image') !== -1) {\r\n          e.preventDefault();\r\n          \r\n          // Get image from clipboard\r\n          const blob = items[i].getAsFile();\r\n          const reader = new FileReader();\r\n          \r\n          reader.onload = (event) => {\r\n            // Insert the image\r\n            document.execCommand('insertImage', false, event.target.result);\r\n            handleContentChange();\r\n          };\r\n          \r\n          reader.readAsDataURL(blob);\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle key commands\r\n  const handleKeyDown = (e) => {\r\n    // Support for tab\r\n    if (e.key === 'Tab') {\r\n      e.preventDefault();\r\n      document.execCommand('insertHTML', false, '&nbsp;&nbsp;&nbsp;&nbsp;');\r\n      return;\r\n    }\r\n  };\r\n\r\n  // Handle drag and drop for images\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\r\n      const file = e.dataTransfer.files[0];\r\n      \r\n      if (file.type.startsWith('image/')) {\r\n        const reader = new FileReader();\r\n        \r\n        reader.onload = (event) => {\r\n          document.execCommand('insertImage', false, event.target.result);\r\n          handleContentChange();\r\n        };\r\n        \r\n        reader.readAsDataURL(file);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Mostrar la barra flotante al hacer clic en el editor\r\n  const handleEditorClick = () => {\r\n    // Este evento será capturado por FloatingToolbar \r\n    // pero añadimos la función aquí para dar feedback visual si es necesario\r\n    editorRef.current?.focus();\r\n  };\r\n\r\n  // Estilos para el editor\r\n  const styles = {\r\n    container: {\r\n      position: 'relative',\r\n      width: '100%',\r\n      height: '100%',\r\n      backgroundColor: colors.white,\r\n      borderRadius: borderRadius.md\r\n    },\r\n    editor: {\r\n      width: '100%',\r\n      height: '100%', // Aprovechamos toda la altura disponible al eliminar la barra estática\r\n      padding: spacing.xl,\r\n      outline: 'none',\r\n      overflow: 'auto',\r\n      color: colors.textPrimary,\r\n      fontFamily: typography.fontFamily,\r\n      fontSize: typography.fontSize.md,\r\n      lineHeight: 1.6,\r\n      transition: 'box-shadow 0.2s ease',\r\n      cursor: 'text',\r\n      minHeight: '600px' // Garantizamos una altura mínima adecuada\r\n    },\r\n    placeholder: {\r\n      position: 'absolute',\r\n      top: spacing.xl,\r\n      left: spacing.xl,\r\n      color: colors.gray300,\r\n      pointerEvents: 'none'\r\n    }\r\n  };\r\n\r\n  // Initialize content with default font size\r\n  useEffect(() => {\r\n    if (editorRef.current && !content) {\r\n      // Si el contenido está vacío, establecer el tamaño de fuente predeterminado\r\n      editorRef.current.style.fontSize = '12px';\r\n    }\r\n  }, [content]);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      {/* Barra de herramientas flotante - ahora es la única barra */}\r\n      <FloatingToolbar \r\n        onFormatText={applyFormat}\r\n        activeFormats={activeFormats}\r\n        editorRef={editorRef}\r\n        fontSize={currentFontSize}\r\n        setFontSize={(size) => applyFormat('fontSize', `${size}px`)}\r\n      />\r\n      \r\n      {/* Placeholder text when editor is empty */}\r\n      {(!internalContent || internalContent === '<p><br></p>' || internalContent === '<br>') && (\r\n        <div style={styles.placeholder}>\r\n          Comienza a escribir...\r\n        </div>\r\n      )}\r\n      \r\n      {/* Editable content area */}\r\n      <div\r\n        ref={editorRef}\r\n        style={{...styles.editor, fontSize: '12px' }}\r\n        onInput={handleContentChange}\r\n        onBlur={handleContentChange}\r\n        onKeyDown={handleKeyDown}\r\n        onClick={(e) => {\r\n          handleEditorClick();\r\n          checkActiveFormats();\r\n        }}\r\n        onKeyUp={checkActiveFormats}\r\n        onMouseUp={checkActiveFormats}\r\n        onPaste={handlePaste}\r\n        onDrop={handleDrop}\r\n        onDragOver={(e) => e.preventDefault()}\r\n      >\r\n        {/* Initial content will be set from the content prop */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SimpleEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}